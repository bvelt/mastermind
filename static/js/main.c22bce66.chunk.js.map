{"version":3,"sources":["game/GameSettings.js","game/CodeMaker.js","components/CodePeg.js","components/CodePegList.js","components/Header.js","components/KeyPeg.js","components/KeyPegGrid.js","components/DecodeGrid.js","components/Button.js","actions/ActionTypes.js","actions/ActionCreators.js","containers/DecodeEditor.js","components/Rules.js","containers/SinglePlayer.js","game/GameState.js","game/CodeBreaker.js","game/GameFlow.js","reducers/Reducers.js","App.js","serviceWorker.js","index.js"],"names":["GameSettings","codeLength","arguments","length","undefined","DEFAULT_CODE_LENGTH","codeMaximumDigit","DEFAULT_CODE_MAXIMUM_DIGIT","maximumGuessCount","DEFAULT_MAXIMUM_GUESS_COUNT","Object","classCallCheck","this","defaultSettings","CodeMaker","settings","code","i","push","randomDigit","newCode","Array","from","validateCode","Error","value","RangeError","concat","validateCodeToken","pop","Math","floor","random","_this","forEach","CodePeg","_this$props","props","_this$props$value","EMPTY_VALUE","_this$props$isClickab","isClickable","_this$props$onClick","onClick","color","colorOf","react_default","a","createElement","className","last","COLORS","slice","React","Component","CodePegList","_this$props$values","values","toConsumableArray","colors","keys","_this$props$isSelecta","isSelectable","_this$props$onSelect","onSelect","items","key","src_components_CodePeg","Header","maker","src_components_CodePegList","createRandom","KeyPeg","defaultValue","KEY_NAMES","indexOf","KeyPegGrid","paddedValues","rows","src_components_KeyPeg","DecodeGrid","_this$props$remaining","remainingGuessCount","_this$props$guesses","guesses","_this$props$keys","trs","tds","j","src_components_KeyPegGrid","solution","every","Button","label","_this$props$isDisable","isDisabled","type","disabled","breaker","CHECK_GUESS","REMOVE_GUESS_TOKEN","NEW_GAME","RANDOM_GUESS","RESET_GUESS","APPEND_GUESS_TOKEN","REMOVE_CODE_TOKEN","RANDOM_CODE","RESET_CODE","SAVE_CODE","APPEND_CODE_TOKEN","newGame","types","DecodeEditor","possibleConstructorReturn","getPrototypeOf","call","handleSelect","bind","assertThisInitialized","handleReset","handleRandom","handleDelete","handleCheck","handleNewGame","nextGuess","dispatch","actions","_this$props2","_this$props3","_this$props4","prevGuesses","padded","_this$props5","prevKeys","broken","gs","ks","active","message","padRight","fill","newGameButton","src_components_Button","src_components_DecodeGrid","connect","state","Rules","toggleRules","open","setState","SinglePlayer","src_components_Rules","src_containers_DecodeEditor","GameState","CodeBreaker","guess","xs","ys","MATCH_KEYS","position","x","shift","y","none","GameFlow","source","item","copied","checkGuess","k","assign","copyAndPush","removeCodeToken","randomCode","randomGuess","resetGuess","resetCode","appendCodeToken","savedCode","createManual","game","action","flow","removeGuessToken","appendGuessToken","saveCode","App","store","createStore","gameReducers","es","src_components_Header","src_containers_SinglePlayer","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c22bce66.chunk.js","sourcesContent":["\nclass GameSettings {\n\n  static DEFAULT_CODE_LENGTH = 4;\n  static DEFAULT_CODE_MAXIMUM_DIGIT = 5;\n  static DEFAULT_MAXIMUM_GUESS_COUNT = 10;\n\n  constructor(codeLength = GameSettings.DEFAULT_CODE_LENGTH,\n    codeMaximumDigit = GameSettings.DEFAULT_CODE_MAXIMUM_DIGIT,\n    maximumGuessCount = GameSettings.DEFAULT_MAXIMUM_GUESS_COUNT) {\n    this.codeLength = codeLength;\n    this.codeMaximumDigit = codeMaximumDigit;\n    this.maximumGuessCount = maximumGuessCount;\n  }\n}\n\nconst defaultSettings = new GameSettings();\n\nexport default defaultSettings;","import defaultSettings from './GameSettings';\n\nclass CodeMaker {\n\n  constructor(settings = defaultSettings) {\n    this.settings = settings;\n  }\n\n  createRandom() {\n    let code = [];\n    for (let i = 0; i < this.settings.codeLength; i++) {\n      code.push(this.randomDigit());\n    }\n    return code;\n  }\n\n  createManual(code) {\n    const newCode = Array.from(code);\n    this.validateCode(newCode);\n    return newCode;\n  }\n\n  resetCode(code) {\n    if (code.length === 0) {\n      throw new Error(\"Code is aleady empty\");\n    }\n    return [];\n  }\n\n  appendCodeToken(code, value) {\n    if (!(code.length < this.settings.codeLength)) {\n      throw new RangeError(`Code is at maximum length ${this.settings.codeLength}`);\n    }\n    this.validateCodeToken(value);\n    const newCode = Array.from(code);\n    newCode.push(value);\n    return newCode;\n  }\n\n  removeCodeToken(code) {\n    if (code.length === 0) {\n      throw new RangeError(\"Code is already empty\");\n    }\n    const newCode = Array.from(code);\n    newCode.pop();\n    return newCode;\n  }\n\n  randomDigit() {\n    return Math.floor(Math.random() * (this.settings.codeMaximumDigit + 1));\n  }\n\n  validateCodeToken(value) {\n    if (!(value >= 0 && value <= this.settings.codeMaximumDigit)) {\n      throw new Error(`Code token must be digit between 0 and ${this.settings.codeMaximumDigit}`);\n    }\n  }\n\n  validateCode(code) {\n    if (code.length !== this.settings.codeLength) {\n      throw new Error(`Code must be array of length ${this.settings.codeLength}`);\n    }\n    code.forEach(value => {\n      this.validateCodeToken(value);\n    });\n  }\n}\n\nexport default CodeMaker;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './CodePeg.css';\n\nclass CodePeg extends React.Component {\n  static propTypes = {\n    value: PropTypes.number,\n    isClickable: PropTypes.bool,\n    onClick: PropTypes.func\n  };\n\n  static COLORS = ['blue', 'green', 'orange', 'purple', 'red', 'yellow', 'empty'];\n  static EMPTY_VALUE = 6;\n\n  static defaultValue() {\n    return CodePeg.EMPTY_VALUE;\n  }\n\n  static colors(includeEmpty = false) {\n    const last = includeEmpty ? CodePeg.EMPTY_VALUE + 1 : CodePeg.EMPTY_VALUE;\n    return CodePeg.COLORS.slice(0, last);\n  }\n\n  static colorOf(value) {\n    return CodePeg.COLORS[value];\n  }\n\n  render() {\n    const {\n      value = CodePeg.EMPTY_VALUE,\n      isClickable = false,\n      onClick = () => false\n    } = this.props;\n    const color = CodePeg.colorOf(value);\n    return (\n      <span\n        className={`codePeg codePeg__${color} ${isClickable ? 'codePeg__selectable' : ''}`}\n        onClick={isClickable ? () => onClick(value) : () => false}\n      >{value === CodePeg.EMPTY_VALUE ? '?' : ''}</span>\n    );\n  }\n}\n\nexport default CodePeg;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport CodePeg from './CodePeg';\nimport './CodePegList.css';\n\nclass CodePegList extends React.Component {\n  static propTypes = {\n    values: PropTypes.array,\n    isSelectable: PropTypes.bool,\n    onSelect: PropTypes.func\n  };\n\n  render() {\n    const {\n      values = [...CodePeg.colors().keys()],\n      isSelectable = false,\n      onSelect = () => false\n    } = this.props;\n\n    let items = [];\n    for (let i = 0; i < values.length; i++) {\n      items.push(\n        <li key={i}>\n          <CodePeg value={values[i]}\n            isClickable={isSelectable}\n            onClick={onSelect}></CodePeg>\n        </li>\n      );\n    }\n\n    return (\n      <ul className=\"codePegList\">{items}</ul>\n    );\n  }\n}\n\nexport default CodePegList;","import React from 'react';\nimport CodeMaker from '../game/CodeMaker';\nimport CodePegList from './CodePegList';\nimport './Header.css';\n\nclass Header extends React.Component {\n  render() {\n    const maker = new CodeMaker();\n    return (\n      <div className=\"header clearfix\">\n        <h1>Mastermind</h1>\n        <CodePegList values={maker.createRandom()}></CodePegList>\n      </div>\n    );\n  }\n}\n\nexport default Header;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './KeyPeg.css';\n\nclass KeyPeg extends React.Component {\n  static propTypes = {\n    value: PropTypes.number\n  };\n\n  static KEY_NAMES = ['position', 'color', 'none']\n\n  static defaultValue() {\n    return KeyPeg.KEY_NAMES.indexOf('none');\n  }\n\n  render() {\n    const {\n      value = KeyPeg.defaultValue()\n    } = this.props;\n\n    return (\n      <span className={`keyPeg keyPeg__${KeyPeg.KEY_NAMES[value]}`}></span>\n    );\n  }\n}\n\nexport default KeyPeg;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport KeyPeg from './KeyPeg';\nimport './KeyPegGrid.css';\n\nclass KeyPegGrid extends React.Component {\n  static propTypes = {\n    values: PropTypes.array\n  };\n\n  render() {\n    const {\n      values = []\n    } = this.props;\n\n    const paddedValues = Array.from(values);\n    while (paddedValues.length < 4) {\n      paddedValues.push(KeyPeg.defaultValue());\n    }\n\n    const rows = [];\n    for (let i = 0; i < paddedValues.length; i += 2) {\n      rows.push(\n        <tr key={i}>\n          <td><KeyPeg value={paddedValues[i]}></KeyPeg></td>\n          <td><KeyPeg value={paddedValues[i + 1]}></KeyPeg></td>\n        </tr>\n      );\n    }\n\n    return (\n      <table className=\"keyPegGrid\">\n        <tbody>\n          {rows}\n        </tbody>\n      </table>\n    );\n  }\n}\n\nexport default KeyPegGrid;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport CodePeg from './CodePeg';\nimport KeyPegGrid from './KeyPegGrid';\nimport './DecodeGrid.css';\n\nclass DecodeGrid extends React.Component {\n  static propTypes = {\n    remainingGuessCount: PropTypes.number,\n    guesses: PropTypes.array,\n    keys: PropTypes.array,\n  };\n\n  render() {\n    const {\n      remainingGuessCount = 0,\n      guesses = [],\n      keys = []\n    } = this.props;\n\n    const trs = [];\n    for (let i = 0; i < guesses.length; i++) {\n      const tds = [];\n\n      for (let j = 0; j < guesses[i].length; j++) {\n        tds.push(\n          <td key={`cp${j}`}><CodePeg value={guesses[i][j]}></CodePeg></td>\n        );\n      }\n\n      tds.push(\n        <td key={`kg${i}`} className=\"keys\"><KeyPegGrid values={keys[i]}></KeyPegGrid></td>\n      );\n\n      const solution = keys[i].every(key => key === 0);\n      trs.push(\n        <tr className={solution === true ? 'solution' : ''} key={i}>{tds}</tr>\n      );\n    }\n\n    return (\n      <table className=\"decodeGrid\">\n        <caption>{remainingGuessCount} guess{remainingGuessCount !== 1 ? 'es' : ''} remaining</caption>\n        <tbody>\n          {trs}\n        </tbody>\n      </table>\n    );\n  }\n}\n\nexport default DecodeGrid;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './Button.css';\n\nclass Button extends React.Component {\n  static propTypes = {\n    label: PropTypes.string.isRequired,\n    isDisabled: PropTypes.bool,\n    onClick: PropTypes.func\n  };\n  render() {\n    const {\n      label,\n      isDisabled = false,\n      onClick = () => false\n    } = this.props;\n    return (\n      <button type={'button'}\n        className={`button ${isDisabled ? 'button__disabled' : ''}`}\n        disabled={isDisabled}\n        onClick={!isDisabled ? onClick : () => false}>\n        {label}\n      </button>\n    );\n  }\n}\n\nexport default Button;","\nexport const breaker = {\n  CHECK_GUESS: \"breaker/check\",\n  REMOVE_GUESS_TOKEN: \"breaker/remove-guess-token\",\n  NEW_GAME: \"breaker/new-game\",\n  RANDOM_GUESS: \"breaker/random-guess\",\n  RESET_GUESS: \"breaker/reset-guess\",\n  APPEND_GUESS_TOKEN: \"breaker/append-guess-token\"\n};\n\nexport const maker = {\n  REMOVE_CODE_TOKEN: \"maker/remove-code-token\",\n  RANDOM_CODE: \"maker/random-code\",\n  RESET_CODE: \"maker/reset-code\",\n  SAVE_CODE: \"maker/save-code\",\n  APPEND_CODE_TOKEN: \"maker/append-code-token\"\n};","import * as types from './ActionTypes';\n\nexport function checkGuess(values) {\n  return {\n    type: types.breaker.CHECK_GUESS\n  };\n}\n\nexport function removeGuessToken() {\n  return {\n    type: types.breaker.REMOVE_GUESS_TOKEN\n  };\n}\n\nexport function newGame() {\n  return {\n    type: types.breaker.NEW_GAME\n  };\n}\n\nexport function randomGuess() {\n  return {\n    type: types.breaker.RANDOM_GUESS\n  };\n}\n\nexport function resetGuess() {\n  return {\n    type: types.breaker.RESET_GUESS\n  };\n}\n\nexport function appendGuessToken(value) {\n  return {\n    type: types.breaker.APPEND_GUESS_TOKEN,\n    value: value\n  };\n}\n\nexport function removeCodeToken() {\n  return {\n    type: types.maker.REMOVE_CODE_TOKEN\n  };\n}\n\nexport function randomCode() {\n  return {\n    type: types.maker.RANDOM_CODE\n  };\n}\n\nexport function resetCode() {\n  return {\n    type: types.maker.RESET_CODE\n  };\n}\n\nexport function saveCode() {\n  return {\n    type: types.maker.SAVE_CODE\n  };\n}\n\nexport function appendCodeToken(value) {\n  return {\n    type: types.maker.APPEND_CODE_TOKEN,\n    value: value\n  };\n}","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport CodePegList from '../components/CodePegList';\nimport CodePeg from '../components/CodePeg';\nimport KeyPeg from '../components/KeyPeg';\nimport DecodeGrid from '../components/DecodeGrid';\nimport Button from '../components/Button';\nimport * as actions from '../actions/ActionCreators';\nimport './DecodeEditor.css';\n\nclass DecodeEditor extends React.Component {\n\n  static propTypes = {\n    code: PropTypes.array,\n    nextGuess: PropTypes.array,\n    maximumGuessCount: PropTypes.number,\n    length: PropTypes.number,\n    prevGuesses: PropTypes.array,\n    prevKeys: PropTypes.array,\n    onDecodeDone: PropTypes.func\n  };\n\n  constructor(props) {\n    super(props);\n    this.handleSelect = this.handleSelect.bind(this);\n    this.handleReset = this.handleReset.bind(this);\n    this.handleRandom = this.handleRandom.bind(this);\n    this.handleDelete = this.handleDelete.bind(this);\n    this.handleCheck = this.handleCheck.bind(this);\n    this.handleNewGame = this.handleNewGame.bind(this);\n  }\n\n  handleSelect(value) {\n    const {\n      nextGuess,\n      length,\n      dispatch\n    } = this.props;\n    if (nextGuess.length < length) {\n      dispatch(actions.appendGuessToken(value));\n    }\n  }\n\n  handleDelete() {\n    const {\n      nextGuess,\n      dispatch\n    } = this.props;\n    if (nextGuess.length > 0) {\n      dispatch(actions.removeGuessToken());\n    }\n  }\n\n  handleReset() {\n    const {\n      nextGuess,\n      dispatch\n    } = this.props;\n    if (nextGuess.length > 0) {\n      dispatch(actions.resetGuess());\n    }\n  }\n\n  handleRandom() {\n    const {\n      dispatch\n    } = this.props;\n    dispatch(actions.randomGuess());\n  }\n\n  handleCheck() {\n    const {\n      maximumGuessCount,\n      prevGuesses,\n      nextGuess,\n      length,\n      dispatch\n    } = this.props;\n    if (nextGuess.length === length && prevGuesses.length < maximumGuessCount) {\n      dispatch(actions.checkGuess());\n    }\n  }\n\n  handleNewGame() {\n    const {\n      dispatch\n    } = this.props;\n    dispatch(actions.newGame());\n  }\n\n  padRight(items, length, value) {\n    const padded = Array.from(items);\n    while (padded.length < length) {\n      padded.push(value);\n    }\n    return padded;\n  }\n\n  render() {\n    const {\n      code,\n      maximumGuessCount,\n      length,\n      nextGuess,\n      prevGuesses,\n      prevKeys,\n      broken\n    } = this.props;\n\n    let gs = Array.from(prevGuesses);\n    let ks = Array.from(prevKeys);\n\n    const active = !broken && prevGuesses.length < maximumGuessCount;\n    let message = \"Congratualations! You broke the code.\";\n\n    if (!active && !broken) {\n      gs.push(code);\n      ks.push(Array(length).fill(0));\n      message = \"Bummer. You failed to break the code.\";\n    } else if (active) {\n      gs.push(this.padRight(nextGuess, length, CodePeg.defaultValue()));\n      ks.push(Array(length).fill(KeyPeg.defaultValue()));\n      message = `Guess secret code of ${length} colored pegs`;\n    }\n\n    const newGameButton = [];\n    if (!active) {\n      newGameButton.push(\n        <Button key={7} label=\"New Game\" onClick={this.handleNewGame}></Button>\n      );\n    }\n\n    return (\n      <div className=\"decodeEditor\">\n        <p>{message}</p>\n        <CodePegList key={1} values={[...CodePeg.colors().keys()]}\n          isSelectable={active && nextGuess.length < length}\n          onSelect={this.handleSelect}></CodePegList>\n        <Button key={2} label=\"Random\"\n          isDisabled={!active}\n          onClick={this.handleRandom}></Button>\n        <Button key={3} label=\"Reset\"\n          isDisabled={!active || nextGuess.length === 0}\n          onClick={this.handleReset}></Button>\n        <Button key={4} label=\"Delete\"\n          isDisabled={!active || nextGuess.length === 0}\n          onClick={this.handleDelete}></Button>\n        <Button key={5} label=\"Check\"\n          isDisabled={!active || nextGuess.length < length}\n          onClick={this.handleCheck}></Button>\n        <DecodeGrid key={6}\n          remainingGuessCount={maximumGuessCount - prevGuesses.length}\n          guesses={gs}\n          keys={ks}></DecodeGrid>\n        {newGameButton}\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    code: state.code,\n    nextGuess: state.nextGuess,\n    maximumGuessCount: state.settings.maximumGuessCount,\n    length: state.settings.codeLength,\n    prevGuesses: state.prevGuesses,\n    prevKeys: state.prevKeys,\n    broken: state.broken\n  };\n}\n\nexport default connect(mapStateToProps)(DecodeEditor);","import React from 'react';\nimport './Rules.css';\n\nclass Rules extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.toggleRules = this.toggleRules.bind(this);\n    this.state = {\n      open: false\n    };\n  }\n\n  toggleRules() {\n    const {\n      open\n    } = this.state;\n    this.setState({\n      open: !open\n    });\n  }\n\n  render() {\n    const {\n      open\n    } = this.state;\n    return (\n      <div className=\"rules\">\n        <span className=\"rulesToggle\" onClick={this.toggleRules}>{open ? 'Hide' : 'Show'} Rules</span>\n        <p className={open ? 'Show' : 'Hide'}>A codemaker has created a secret pattern of 4 colored pegs. Guess the pegs within 10 turns. A black peg is returned for each peg in your guess that matches the color and position of one peg in the pattern. A white peg is returned for each peg that is the correct color of one peg in the pattern but the incorrect position. A match is counted only once.</p>\n      </div>\n    );\n  }\n}\n\nexport default Rules;\n","import React from 'react';\nimport DecodeEditor from './DecodeEditor';\nimport Rules from '../components/Rules';\nimport './SinglePlayer.css';\n\nclass SinglePlayer extends React.Component {\n  render() {\n    return (\n      <div className=\"singlePlayer clearfix\">\n        <div className=\"column sidebar\">\n          <Rules></Rules>\n        </div>\n        <div className=\"column main\">\n          <DecodeEditor></DecodeEditor>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default SinglePlayer;","import defaultSettings from './GameSettings';\n\nclass GameState {\n  constructor(settings = defaultSettings, code = [], nextGuess = [], prevGuesses = [], prevKeys = [], broken = false) {\n    this.settings = settings;\n    this.code = code;\n    this.nextGuess = nextGuess;\n    this.prevGuesses = prevGuesses;\n    this.prevKeys = prevKeys;\n    this.broken = broken;\n  }\n}\n\nexport default GameState;","import defaultSettings from './GameSettings';\n\nclass CodeBreaker {\n\n  static MATCH_KEYS = {\n    position: 0,\n    color: 1,\n    none: 2\n  }\n\n  constructor(settings = defaultSettings) {\n    this.settings = settings;\n  }\n\n  checkGuess(code, guess) {\n    if (!(code.length === guess.length)) {\n      throw new Error(`Guess length ${guess.length} must be equal to code length ${code.length}`);\n    }\n\n    let key = [];\n    let xs = [];\n    let ys = [];\n\n    for (let i = 0; i < code.length; i++) {\n      if (code[i] === guess[i]) {\n        key.push(CodeBreaker.MATCH_KEYS.position);\n      } else {\n        xs.push(code[i]);\n        ys.push(guess[i]);\n      }\n    }\n\n    while (xs.length > 0) {\n      let x = xs.shift();\n      for (let i = 0; i < ys.length; i++) {\n        let y = ys.shift();\n        if (x === y) {\n          key.push(CodeBreaker.MATCH_KEYS.color);\n          break;\n        } else {\n          ys.push(y);\n        }\n      }\n    }\n\n    while (key.length < code.length) {\n      key.push(CodeBreaker.MATCH_KEYS.none);\n    }\n\n    return key;\n  }\n}\n\nexport default CodeBreaker;","import GameState from './GameState';\nimport CodeMaker from './CodeMaker';\nimport CodeBreaker from './CodeBreaker';\n\nclass GameFlow {\n  constructor(state = new GameState()) {\n    this.state = state;\n  }\n\n  isActive() {\n    return this.state.code.length > 0\n      && this.state.broken !== true\n      && this.state.prevGuesses.length < this.state.settings.maximumGuessCount;\n  }\n\n  isSuccess() {\n    return this.state.broken === true;\n  }\n\n  isFailure() {\n    return this.state.broken !== true\n      && this.state.prevGuesses.length >= this.state.settings.maximumGuessCount;\n  }\n\n  copyAndPush(source, item) {\n    const copied = Array.from(source);\n    copied.push(Array.from(item));\n    return copied;\n  }\n\n  checkGuess() {\n    const breaker = new CodeBreaker(this.state.settings);\n    const key = breaker.checkGuess(this.state.code, this.state.nextGuess);\n    const broken = key.every(k => k === CodeBreaker.MATCH_KEYS.position);\n    this.state = Object.assign({}, this.state, {\n      nextGuess: [],\n      prevGuesses: this.copyAndPush(this.state.prevGuesses, this.state.nextGuess),\n      prevKeys: this.copyAndPush(this.state.prevKeys, key),\n      broken: broken\n    });\n  }\n\n  removeGuessToken() {\n    const maker = new CodeMaker(this.state.settings);\n    const nextGuess = maker.removeCodeToken(this.state.nextGuess);\n    this.state = Object.assign({}, this.state, {\n      nextGuess: nextGuess\n    });\n  }\n\n  newGame() {\n    const maker = new CodeMaker(this.state.settings);\n    const randomCode = maker.createRandom();\n    this.state = new GameState(this.state.settings, randomCode);\n  }\n\n  randomGuess() {\n    const maker = new CodeMaker(this.state.settings);\n    const randomGuess = maker.createRandom();\n    this.state = Object.assign({}, this.state, {\n      nextGuess: randomGuess\n    });\n  }\n\n  resetGuess() {\n    const maker = new CodeMaker(this.state.settings);\n    const resetGuess = maker.resetCode(this.state.nextGuess);\n    this.state = Object.assign({}, this.state, {\n      nextGuess: resetGuess\n    });\n  }\n\n  appendGuessToken(value) {\n    const maker = new CodeMaker(this.state.settings);\n    const nextGuess = maker.appendCodeToken(this.state.nextGuess, value);\n    this.state = Object.assign({}, this.state, {\n      nextGuess: nextGuess\n    });\n  }\n\n  removeCodeToken() {\n    const maker = new CodeMaker(this.state.settings);\n    const code = maker.removeCodeToken(this.state.code);\n    this.state = Object.assign({}, this.state, {\n      code: code\n    });\n  }\n\n  randomCode() {\n    const maker = new CodeMaker(this.state.settings);\n    const randomCode = maker.createRandom();\n    this.state = Object.assign({}, this.state, {\n      code: randomCode\n    });\n  }\n\n  resetCode() {\n    const maker = new CodeMaker(this.state.settings);\n    const resetCode = maker.resetCode(this.state.code);\n    this.state = Object.assign({}, this.state, {\n      code: resetCode\n    });\n  }\n\n  saveCode() {\n    const maker = new CodeMaker(this.state.settings);\n    const savedCode = maker.createManual(this.state.code);\n    this.state = Object.assign({}, this.state, {\n      code: savedCode\n    });\n  }\n\n  appendCodeToken(value) {\n    const maker = new CodeMaker(this.state.settings);\n    const newCode = maker.appendCodeToken(this.state.code, value);\n    this.state = Object.assign({}, this.state, {\n      code: newCode\n    });\n  }\n}\n\nexport default GameFlow;","import * as types from '../actions/ActionTypes';\nimport GameState from '../game/GameState';\nimport GameFlow from '../game/GameFlow';\n\nfunction game(state = new GameState(), action) {\n  const flow = new GameFlow(state);\n  switch (action.type) {\n    case types.breaker.CHECK_GUESS:\n      flow.checkGuess();\n      return flow.state;\n    case types.breaker.REMOVE_GUESS_TOKEN:\n      flow.removeGuessToken();\n      return flow.state;\n    case types.breaker.NEW_GAME:\n      flow.newGame();\n      return flow.state;\n    case types.breaker.RANDOM_GUESS:\n      flow.randomGuess();\n      return flow.state;\n    case types.breaker.RESET_GUESS:\n      flow.resetGuess();\n      return flow.state;\n    case types.breaker.APPEND_GUESS_TOKEN:\n      flow.appendGuessToken(action.value);\n      return flow.state;\n    case types.maker.REMOVE_CODE_TOKEN:\n      flow.removeCodeToken();\n      return flow.state;\n    case types.maker.RANDOM_CODE:\n      flow.randomCode();\n      return flow.state;\n    case types.maker.RESET_CODE:\n      flow.resetCode();\n      return flow.state;\n    case types.maker.SAVE_CODE:\n      flow.saveCode();\n      return flow.state;\n    case types.maker.APPEND_CODE_TOKEN:\n      flow.appendCodeToken(action.value);\n      return flow.state;\n    default:\n      return state;\n  }\n}\n\nexport default game;","import React from 'react';\nimport { Provider } from 'react-redux'\nimport { createStore } from 'redux'\nimport Header from './components/Header';\nimport SinglePlayer from './containers/SinglePlayer';\nimport gameReducers from './reducers/Reducers';\nimport * as actions from './actions/ActionCreators';\nimport './App.css';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.store = createStore(gameReducers);\n  }\n  componentDidMount() {\n    this.store.dispatch(actions.newGame());\n  }\n  render() {\n    return (\n      <Provider store={this.store}>\n        <div className=\"App\">\n          <Header></Header>\n          <SinglePlayer></SinglePlayer>\n        </div>\n      </Provider>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}