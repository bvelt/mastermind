{"version":3,"sources":["components/Header.js","components/Footer.js","components/CodePeg.js","components/IconButton.js","components/CodePegList.js","components/KeyPeg.js","components/KeyPegGrid.js","components/DecodeGrid.js","components/Button.js","game/GameSettings.js","game/CodeBreaker.js","game/GameCombinatorics.js","components/Assist.js","actions/ActionTypes.js","actions/ActionCreators.js","containers/DecodeEditor.js","components/Rules.js","containers/SinglePlayer.js","game/GameState.js","game/CodeMaker.js","game/GameFlow.js","reducers/Reducers.js","App.js","serviceWorker.js","index.js"],"names":["Header","react_default","a","createElement","className","alt","src","React","Component","Footer","href","CodePeg","_this$props","this","props","_this$props$value","value","EMPTY_VALUE","_this$props$isClickab","isClickable","_this$props$onClick","onClick","color","colorOf","concat","last","arguments","length","undefined","COLORS","slice","IconButton","icon","_this$props$isDisable","isDisabled","style","backgroundImage","type","title","disabled","ICONS","CodePegList","_this$props$values","values","Object","toConsumableArray","colors","keys","_this$props$isSelecta","isSelectable","_this$props$onSelect","onSelect","_this$props$onCheck","onCheck","_this$props$onDelete","onDelete","_this$props$onRandom","onRandom","_this$props$onReset","onReset","items","i","push","key","src_components_CodePeg","src_components_IconButton","KeyPeg","defaultValue","NAMES","indexOf","name","KeyPegGrid","_this$props$answer","answer","_this$props$answer2","slicedToArray","position","_this$props$length","Array","fill","unshift","valueOf","src_components_KeyPeg","DecodeGrid","_this$props$remaining","remainingGuessCount","_this$props$guesses","guesses","_this$props$answers","answers","trs","tds","j","src_components_KeyPegGrid","solution","Button","label","GameSettings","codeLength","DEFAULT_CODE_LENGTH","codeMaximumDigit","DEFAULT_CODE_MAXIMUM_DIGIT","maximumGuessCount","DEFAULT_MAXIMUM_GUESS_COUNT","classCallCheck","defaultSettings","CodeBreaker","settings","code","guess","Error","xs","ys","x","shift","y","GameCombinatorics","elements","comb","codes","prevGuess","prevAnswer","breaker","filtered","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","Symbol","iterator","next","done","checkGuess","err","return","reduced","filterPermutationsByAnswer","dimx","dimy","pivot","Assist","_this","possibleConstructorReturn","getPrototypeOf","call","handleToggle","bind","assertThisInitialized","state","opened","_this2","_this$props$onToggle","onToggle","nextOpened","setState","assign","_this$props$possibleC","possibleCodes","rows","map","lis","colSpan","CHECK_GUESS","REMOVE_GUESS_TOKEN","NEW_GAME","RANDOM_GUESS","RESET_GUESS","APPEND_GUESS_TOKEN","maker","REMOVE_CODE_TOKEN","RANDOM_CODE","RESET_CODE","SAVE_CODE","APPEND_CODE_TOKEN","newGame","types","DecodeEditor","handleSelect","handleReset","handleRandom","handleDelete","handleCheck","handleNewGame","nextGuess","dispatch","actions","_this$props2","_this$props3","_this$props4","prevGuesses","padded","from","_this$props5","prevAnswers","broken","active","message","padRight","newGameButton","role","aria-label","src_components_Button","src_components_CodePegList","src_components_DecodeGrid","src_components_Assist","connect","Rules","toggleRules","open","SinglePlayer","src_components_Rules","src_containers_DecodeEditor","GameState","CodeMaker","randomDigit","newCode","validateCode","RangeError","validateCodeToken","pop","Math","floor","random","forEach","GameFlow","source","item","copied","_this$state","combinatorics","copyAndPush","removeCodeToken","randomCode","createRandom","generatePermutations","randomGuess","resetGuess","resetCode","appendCodeToken","savedCode","createManual","game","action","flow","removeGuessToken","appendGuessToken","saveCode","App","store","createStore","gameReducers","es","src_components_Header","src_containers_SinglePlayer","src_components_Footer","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b4d863d0.chunk.js","sourcesContent":["import React from 'react';\nimport './Header.css';\n\nclass Header extends React.Component {\n  render() {\n    return (\n      <div className=\"header\">\n        <img className=\"logo\" alt=\"Logo\" src=\"assets/Logo.png\" />\n      </div>\n    );\n  }\n}\n\nexport default Header;","import React from 'react';\nimport './Footer.css';\n\nclass Footer extends React.Component {\n  render() {\n    return (\n      <div className=\"footer\">\n        <a alt=\"About\" href=\"https://github.com/bvelt/mastermind\">About</a>\n      </div>\n    );\n  }\n}\n\nexport default Footer;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './CodePeg.css';\n\nclass CodePeg extends React.Component {\n  static propTypes = {\n    value: PropTypes.number,\n    isClickable: PropTypes.bool,\n    onClick: PropTypes.func\n  };\n\n  static COLORS = ['blue', 'green', 'orange', 'purple', 'red', 'yellow', 'empty'];\n  static EMPTY_VALUE = 6;\n\n  static defaultValue() {\n    return CodePeg.EMPTY_VALUE;\n  }\n\n  static colors(includeEmpty = false) {\n    const last = includeEmpty ? CodePeg.EMPTY_VALUE + 1 : CodePeg.EMPTY_VALUE;\n    return CodePeg.COLORS.slice(0, last);\n  }\n\n  static colorOf(value) {\n    return CodePeg.COLORS[value];\n  }\n\n  render() {\n    const {\n      value = CodePeg.EMPTY_VALUE,\n      isClickable = false,\n      onClick = () => false\n    } = this.props;\n    const color = CodePeg.colorOf(value);\n    return (\n      <span\n        className={`codePeg codePeg__${color} ${isClickable ? 'codePeg__selectable' : ''}`}\n        onClick={isClickable ? () => onClick(value) : () => false}></span>\n    );\n  }\n}\n\nexport default CodePeg;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './IconButton.css';\n\nclass IconButton extends React.Component {\n  static propTypes = {\n    icon: PropTypes.string.isRequired,\n    isDisabled: PropTypes.bool,\n    onClick: PropTypes.func\n  };\n\n  static ICONS = ['check', 'delete', 'random', 'reset', 'close', 'info'];\n\n  render() {\n    const {\n      icon,\n      isDisabled = false,\n      onClick = () => false\n    } = this.props;\n    const style = {\n      backgroundImage: `url(assets/${icon}.png)`\n    };\n    return (\n      <button type={'button'}\n        title={icon}\n        className={`iconButton ${icon} ${isDisabled ? 'iconButton__disabled' : ''}`}\n        disabled={isDisabled}\n        onClick={!isDisabled ? onClick : () => false}\n        style={style}>\n      </button>\n    );\n  }\n}\n\nexport default IconButton;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport CodePeg from './CodePeg';\nimport IconButton from './IconButton';\nimport './CodePegList.css';\n\nclass CodePegList extends React.Component {\n  static propTypes = {\n    values: PropTypes.array,\n    isSelectable: PropTypes.bool,\n    onSelect: PropTypes.func,\n    onCheck: PropTypes.func,\n    onDelete: PropTypes.func,\n    onRandom: PropTypes.func,\n    onReset: PropTypes.func\n  };\n\n  render() {\n    const {\n      values = [...CodePeg.colors().keys()],\n      isSelectable = false,\n      onSelect = () => false,\n      onCheck = () => false,\n      onDelete = () => false,\n      onRandom = () => false,\n      onReset = () => false\n    } = this.props;\n\n    let items = [];\n    for (let i = 0; i < values.length; i++) {\n      items.push(\n        <li key={i}>\n          <CodePeg value={values[i]}\n            isClickable={isSelectable}\n            onClick={onSelect}></CodePeg>\n        </li>\n      );\n    }\n\n    return (\n      <div className=\"codePegList\">\n        <ul className=\"picker\">\n          {items}\n          <li key={values.length} className={'check'}>\n            <IconButton icon={'check'}\n              isDisabled={isSelectable}\n              onClick={onCheck}></IconButton>\n          </li>\n        </ul>\n        <ul className=\"buttons\">\n          <li>\n            <IconButton icon={'random'}\n              onClick={onRandom}></IconButton>\n          </li>\n          <li>\n            <IconButton icon={'delete'}\n              onClick={onDelete}></IconButton>\n          </li>\n          <li>\n            <IconButton icon={'reset'}\n              onClick={onReset}></IconButton>\n          </li>\n        </ul>\n      </div>\n    );\n  }\n}\n\nexport default CodePegList;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './KeyPeg.css';\n\nclass KeyPeg extends React.Component {\n  static propTypes = {\n    value: PropTypes.number\n  };\n\n  static NAMES = ['position', 'color', 'none']\n\n  static defaultValue() {\n    return KeyPeg.NAMES.indexOf('none');\n  }\n\n  static valueOf(name) {\n    return KeyPeg.NAMES.indexOf(name);\n  }\n\n  render() {\n    const {\n      value = KeyPeg.defaultValue()\n    } = this.props;\n\n    return (\n      <span className={`keyPeg keyPeg__${KeyPeg.NAMES[value]}`}></span>\n    );\n  }\n}\n\nexport default KeyPeg;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport KeyPeg from './KeyPeg';\nimport './KeyPegGrid.css';\n\nclass KeyPegGrid extends React.Component {\n  static propTypes = {\n    length: PropTypes.number,\n    answer: PropTypes.array\n  };\n\n  render() {\n    let {\n      answer: [position, color] = [0, 0],\n      length = 4\n    } = this.props;\n\n    const values = Array(length).fill(KeyPeg.defaultValue());\n    while (color-- > 0) {\n      values.unshift(KeyPeg.valueOf('color'));\n    }\n    while (position-- > 0) {\n      values.unshift(KeyPeg.valueOf('position'));\n    }\n\n    const items = [];\n    for (let i = 0; i < length; i++) {\n      items.push(\n        <li key={i}><KeyPeg value={values[i]}></KeyPeg></li>\n      );\n    }\n\n    return (\n      <ul className=\"keyPegGrid\">\n        {items}\n      </ul>\n    );\n  }\n}\n\nexport default KeyPegGrid;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport CodePeg from './CodePeg';\nimport KeyPegGrid from './KeyPegGrid';\nimport './DecodeGrid.css';\n\nclass DecodeGrid extends React.Component {\n  static propTypes = {\n    remainingGuessCount: PropTypes.number,\n    guesses: PropTypes.array,\n    answers: PropTypes.array,\n  };\n\n  render() {\n    const {\n      remainingGuessCount = 0,\n      guesses = [],\n      answers = []\n    } = this.props;\n\n    const trs = [];\n    for (let i = 0; i < guesses.length; i++) {\n      const tds = [];\n\n      tds.push(\n        <td key={`h$(i}`} className=\"rowHead\">{i + 1}</td>\n      );\n\n      for (let j = 0; j < guesses[i].length; j++) {\n        tds.push(\n          <td key={`cp${j}`}><CodePeg value={guesses[i][j]}></CodePeg></td>\n        );\n      }\n\n      tds.push(\n        <td key={`kg${i}`} className=\"keys\">\n          <KeyPegGrid answer={answers[i]} length={guesses[i].length}></KeyPegGrid>\n        </td>\n      );\n\n      const solution = answers[i][0] === guesses[i].length;\n      trs.push(\n        <tr className={`decodeRow ${solution === true ? 'solution' : ''}`} key={i}>{tds}</tr>\n      );\n    }\n\n    return (\n      <div className=\"decodeGrid\">\n        <div className=\"caption\">\n          <span>{remainingGuessCount} guess{remainingGuessCount !== 1 ? 'es' : ''} remaining</span>\n        </div>\n        <table>\n          <tbody>\n            {trs}\n          </tbody>\n        </table>\n      </div>\n    );\n  }\n}\n\nexport default DecodeGrid;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './Button.css';\n\nclass Button extends React.Component {\n  static propTypes = {\n    label: PropTypes.string.isRequired,\n    isDisabled: PropTypes.bool,\n    onClick: PropTypes.func\n  };\n  render() {\n    const {\n      label,\n      isDisabled = false,\n      onClick = () => false\n    } = this.props;\n    return (\n      <button type={'button'}\n        className={`button ${isDisabled ? 'button__disabled' : ''}`}\n        disabled={isDisabled}\n        onClick={!isDisabled ? onClick : () => false}>\n        {label}\n      </button>\n    );\n  }\n}\n\nexport default Button;","\nclass GameSettings {\n\n  static DEFAULT_CODE_LENGTH = 4;\n  static DEFAULT_CODE_MAXIMUM_DIGIT = 5;\n  static DEFAULT_MAXIMUM_GUESS_COUNT = 10;\n\n  constructor(codeLength = GameSettings.DEFAULT_CODE_LENGTH,\n    codeMaximumDigit = GameSettings.DEFAULT_CODE_MAXIMUM_DIGIT,\n    maximumGuessCount = GameSettings.DEFAULT_MAXIMUM_GUESS_COUNT) {\n    this.codeLength = codeLength;\n    this.codeMaximumDigit = codeMaximumDigit;\n    this.maximumGuessCount = maximumGuessCount;\n  }\n}\n\nconst defaultSettings = new GameSettings();\n\nexport default defaultSettings;","import defaultSettings from './GameSettings';\n\nclass CodeBreaker {\n\n  constructor(settings = defaultSettings) {\n    this.settings = settings;\n  }\n\n  checkGuess(code, guess) {\n    if (!(code.length === guess.length)) {\n      throw new Error(`Guess length ${guess.length} must be equal to code length ${code.length}`);\n    }\n\n    const answer = [0, 0];\n    const xs = [];\n    const ys = [];\n\n    for (let i = 0; i < code.length; i++) {\n      if (code[i] === guess[i]) {\n        answer[0]++;\n      } else {\n        xs.push(code[i]);\n        ys.push(guess[i]);\n      }\n    }\n\n    while (xs.length > 0) {\n      let x = xs.shift();\n      for (let i = 0; i < ys.length; i++) {\n        let y = ys.shift();\n        if (x === y) {\n          answer[1]++;\n          break;\n        } else {\n          ys.push(y);\n        }\n      }\n    }\n\n    return answer;\n  }\n}\n\nexport default CodeBreaker;","import CodeBreaker from './CodeBreaker';\nimport * as comb from 'applied-combinatorics';\nimport defaultSettings from './GameSettings';\n\nclass GameCombinatorics {\n  constructor(settings = defaultSettings) {\n    this.settings = settings;\n  }\n\n  generatePermutations() {\n    const elements = [];\n    for (let i = 0; i <= this.settings.codeMaximumDigit; i++) {\n      elements.push(i);\n    }\n    const length = this.settings.codeLength;\n\n    return comb.enumeratePermutations(elements, length, true);\n  }\n\n  filterPermutationsByAnswer(codes, prevGuess, prevAnswer) {\n    const breaker = new CodeBreaker(this.settings);\n\n    const filtered = [];\n    for (let code of codes) {\n      const answer = breaker.checkGuess(code, prevGuess);\n      if (answer[0] === prevAnswer[0] &&\n        answer[1] === prevAnswer[1]) {\n        filtered.push(code);\n      }\n    }\n\n    return filtered;\n  }\n\n  reducePermutations(codes, guesses, answers) {\n    let reduced = codes;\n    for (let i = 0; i < guesses.length; i++) {\n      reduced = this.filterPermutationsByAnswer(reduced, guesses[i], answers[i]);\n    }\n    return reduced;\n  }\n\n  pivot(codes) {\n    const dimx = this.settings.codeLength + 1;\n    const dimy = this.settings.codeMaximumDigit + 1;\n    const pivot = [];\n    for (let y = 0; y < dimy; y++) {\n      pivot.push(Array(dimx).fill(0));\n    }\n    for (let i = 0; i < codes.length; i++) {\n      for (let j = 0; j < codes[i].length; j++) {\n        pivot[codes[i][j]][j]++;\n      }\n      for (let j = 0; j < dimy; j++) {\n        if (codes[i].indexOf(j) > -1) {\n          pivot[j][dimx - 1]++;\n        }\n      }\n    }\n    return pivot;\n  }\n}\n\nexport default GameCombinatorics;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport GameCombinatorics from '../game/GameCombinatorics';\nimport CodePeg from './CodePeg';\nimport IconButton from './IconButton';\nimport './Assist.css';\n\nclass Assist extends React.Component {\n  static propTypes = {\n    opened: PropTypes.bool,\n    onToggle: PropTypes.func,\n    possibleCodes: PropTypes.array\n  };\n\n  constructor(props) {\n    super(props);\n    this.handleToggle = this.handleToggle.bind(this);\n    this.state = {\n      opened: props.opened || false\n    };\n  }\n\n  handleToggle() {\n    const {\n      onToggle = () => false\n    } = this.props;\n    const {\n      opened\n    } = this.state;\n    const nextOpened = opened === false;\n    this.setState(() => {\n      return Object.assign({}, this.state,\n        { opened: nextOpened });\n    });\n    onToggle(nextOpened);\n  }\n\n  render() {\n    const {\n      possibleCodes = []\n    } = this.props;\n    const {\n      opened\n    } = this.state;\n\n    const comb = new GameCombinatorics();\n    const pivot = comb.pivot(possibleCodes);\n    const rows = [];\n    for (let i = 0; i < pivot.length; i++) {\n      rows.push((\n        <tr key={i + 1}>\n          <td key=\"0\"><CodePeg value={i}></CodePeg></td>\n          {pivot[i].map((x, j) =>\n            (<td key={j + 1}>{x}</td>)\n          )}\n        </tr>\n      ));\n    }\n\n    const maxCodes = 50;\n    const lis = [];\n    for (let i = 0; i < possibleCodes.length && i < maxCodes; i++) {\n      lis.push((\n        <li key={i}>\n          {possibleCodes[i].map((x, j) =>\n            (<span key={j} className={`codePeg codePeg__${CodePeg.colorOf(x)}`}></span>)\n          )}\n        </li>\n      ));\n    }\n\n    return (\n      <div className=\"assistWrap\">\n        <div className={`${opened === false ? 'toggleButton' : 'toggleHidden'}`}>\n          {opened === false ?\n            <IconButton icon={'info'} onClick={this.handleToggle}></IconButton> : ''}\n        </div>\n        <div className={`assist ${opened === false ? 'closed' : ''}`}>\n          <table>\n            <thead>\n              <tr>\n                <td>COLOR</td>\n                <td><CodePeg></CodePeg></td>\n                <td><CodePeg></CodePeg></td>\n                <td><CodePeg></CodePeg></td>\n                <td><CodePeg></CodePeg></td>\n                <td>TOTAL</td>\n              </tr>\n            </thead>\n            <tbody>\n              {rows}\n            </tbody>\n            <tfoot>\n              <tr className=\"total\">\n                <td colSpan=\"5\">Possible codes remaining:</td>\n                <td>{possibleCodes.length}</td>\n              </tr>\n            </tfoot>\n          </table>\n          <ul className=\"possible\">\n            {lis}\n          </ul>\n        </div>\n        {opened === true ?\n          (<div className=\"toggleButton\">\n            <IconButton icon={'close'} onClick={this.handleToggle}></IconButton>\n          </div>) : ''}\n      </div>\n    );\n  }\n}\n\nexport default Assist;","\nexport const breaker = {\n  CHECK_GUESS: \"breaker/check\",\n  REMOVE_GUESS_TOKEN: \"breaker/remove-guess-token\",\n  NEW_GAME: \"breaker/new-game\",\n  RANDOM_GUESS: \"breaker/random-guess\",\n  RESET_GUESS: \"breaker/reset-guess\",\n  APPEND_GUESS_TOKEN: \"breaker/append-guess-token\"\n};\n\nexport const maker = {\n  REMOVE_CODE_TOKEN: \"maker/remove-code-token\",\n  RANDOM_CODE: \"maker/random-code\",\n  RESET_CODE: \"maker/reset-code\",\n  SAVE_CODE: \"maker/save-code\",\n  APPEND_CODE_TOKEN: \"maker/append-code-token\"\n};","import * as types from './ActionTypes';\n\nexport function checkGuess(values) {\n  return {\n    type: types.breaker.CHECK_GUESS\n  };\n}\n\nexport function removeGuessToken() {\n  return {\n    type: types.breaker.REMOVE_GUESS_TOKEN\n  };\n}\n\nexport function newGame() {\n  return {\n    type: types.breaker.NEW_GAME\n  };\n}\n\nexport function randomGuess() {\n  return {\n    type: types.breaker.RANDOM_GUESS\n  };\n}\n\nexport function resetGuess() {\n  return {\n    type: types.breaker.RESET_GUESS\n  };\n}\n\nexport function appendGuessToken(value) {\n  return {\n    type: types.breaker.APPEND_GUESS_TOKEN,\n    value: value\n  };\n}\n\nexport function removeCodeToken() {\n  return {\n    type: types.maker.REMOVE_CODE_TOKEN\n  };\n}\n\nexport function randomCode() {\n  return {\n    type: types.maker.RANDOM_CODE\n  };\n}\n\nexport function resetCode() {\n  return {\n    type: types.maker.RESET_CODE\n  };\n}\n\nexport function saveCode() {\n  return {\n    type: types.maker.SAVE_CODE\n  };\n}\n\nexport function appendCodeToken(value) {\n  return {\n    type: types.maker.APPEND_CODE_TOKEN,\n    value: value\n  };\n}","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport CodePegList from '../components/CodePegList';\nimport CodePeg from '../components/CodePeg';\nimport DecodeGrid from '../components/DecodeGrid';\nimport Button from '../components/Button';\nimport Assist from '../components/Assist';\nimport * as actions from '../actions/ActionCreators';\nimport './DecodeEditor.css';\n\nclass DecodeEditor extends React.Component {\n  static propTypes = {\n    code: PropTypes.array,\n    possibleCodes: PropTypes.array,\n    nextGuess: PropTypes.array,\n    maximumGuessCount: PropTypes.number,\n    length: PropTypes.number,\n    prevGuesses: PropTypes.array,\n    prevAnswers: PropTypes.array,\n    onDecodeDone: PropTypes.func\n  };\n\n  constructor(props) {\n    super(props);\n    this.handleSelect = this.handleSelect.bind(this);\n    this.handleReset = this.handleReset.bind(this);\n    this.handleRandom = this.handleRandom.bind(this);\n    this.handleDelete = this.handleDelete.bind(this);\n    this.handleCheck = this.handleCheck.bind(this);\n    this.handleNewGame = this.handleNewGame.bind(this);\n  }\n\n  handleSelect(value) {\n    const {\n      nextGuess,\n      length,\n      dispatch\n    } = this.props;\n    if (nextGuess.length < length) {\n      dispatch(actions.appendGuessToken(value));\n    }\n  }\n\n  handleDelete() {\n    const {\n      nextGuess,\n      dispatch\n    } = this.props;\n    if (nextGuess.length > 0) {\n      dispatch(actions.removeGuessToken());\n    }\n  }\n\n  handleReset() {\n    const {\n      nextGuess,\n      dispatch\n    } = this.props;\n    if (nextGuess.length > 0) {\n      dispatch(actions.resetGuess());\n    }\n  }\n\n  handleRandom() {\n    const {\n      dispatch\n    } = this.props;\n    dispatch(actions.randomGuess());\n  }\n\n  handleCheck() {\n    const {\n      maximumGuessCount,\n      prevGuesses,\n      nextGuess,\n      length,\n      dispatch\n    } = this.props;\n    if (nextGuess.length === length && prevGuesses.length < maximumGuessCount) {\n      dispatch(actions.checkGuess());\n    }\n  }\n\n  handleNewGame() {\n    const {\n      dispatch\n    } = this.props;\n    dispatch(actions.newGame());\n  }\n\n  padRight(items, length, value) {\n    const padded = Array.from(items);\n    while (padded.length < length) {\n      padded.push(value);\n    }\n    return padded;\n  }\n\n  render() {\n    const {\n      code,\n      possibleCodes,\n      maximumGuessCount,\n      length,\n      nextGuess,\n      prevGuesses,\n      prevAnswers,\n      broken\n    } = this.props;\n\n    let guesses = Array.from(prevGuesses);\n    let answers = Array.from(prevAnswers);\n\n    const active = !broken && prevGuesses.length < maximumGuessCount;\n    let message = \"You broke the code!\";\n\n    if (!active && !broken) {\n      guesses.push(code);\n      answers.push([4, 0]);\n      message = \"Bummer. You failed.\";\n    } else if (active) {\n      guesses.push(this.padRight(nextGuess, length, CodePeg.defaultValue()));\n      answers.push([0, 0]);\n    }\n\n    while (guesses.length < maximumGuessCount) {\n      guesses.push(Array(length).fill(CodePeg.defaultValue()));\n      answers.push([0, 0]);\n    }\n\n    let newGameButton = '';\n    if (!active) {\n      newGameButton = (\n        <div className=\"gameover\">\n          <div className=\"message\">\n            <span className=\"emoji\" role=\"img\"\n              aria-label=\"Face\">{broken === true ? '😃' : '🙁'}</span>\n            <span className=\"text\">{message}</span>\n          </div>\n          <Button key={7} label=\"TRY AGAIN\" onClick={this.handleNewGame}></Button>\n        </div>\n      );\n    }\n\n    return (\n      <div className=\"decodeEditor\">\n        <div className=\"c1\">\n          <CodePegList key={1} values={[...CodePeg.colors().keys()]}\n            isSelectable={active && nextGuess.length < length}\n            onSelect={this.handleSelect}\n            onCheck={this.handleCheck}\n            onDelete={this.handleDelete}\n            onRandom={this.handleRandom}\n            onReset={this.handleReset}></CodePegList>\n          <DecodeGrid key={6}\n            remainingGuessCount={maximumGuessCount - prevGuesses.length}\n            guesses={guesses}\n            answers={answers}></DecodeGrid>\n          {newGameButton}\n        </div>\n        <div className=\"c2\">\n          <Assist possibleCodes={possibleCodes}></Assist>\n        </div>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    code: state.code,\n    possibleCodes: state.possibleCodes,\n    nextGuess: state.nextGuess,\n    maximumGuessCount: state.settings.maximumGuessCount,\n    length: state.settings.codeLength,\n    prevGuesses: state.prevGuesses,\n    prevAnswers: state.prevAnswers,\n    broken: state.broken\n  };\n}\n\nexport default connect(mapStateToProps)(DecodeEditor);","import React from 'react';\nimport './Rules.css';\n\nclass Rules extends React.Component {\n  constructor(props) {\n    super(props);\n    this.toggleRules = this.toggleRules.bind(this);\n    this.state = {\n      open: false\n    };\n  }\n\n  toggleRules() {\n    const {\n      open\n    } = this.state;\n    this.setState({\n      open: !open\n    });\n  }\n\n  render() {\n    const {\n      open\n    } = this.state;\n    return (\n      <div className=\"rules\">\n        <span className=\"rulesToggle\" onClick={this.toggleRules}>{open ? 'Hide ' : 'Rules'}</span>\n        <p className={open ? '' : 'hide'}>A codemaker has created a secret pattern of 4 colored pegs. A single color can be used more than once. Guess the pegs within 10 turns. A black peg is returned for each peg in your guess that matches the color and position of one peg in the pattern. A gray peg is returned for each peg that is the correct color of one peg in the pattern but the incorrect position. A match is counted only once.</p>\n      </div>\n    );\n  }\n}\n\nexport default Rules;\n","import React from 'react';\nimport DecodeEditor from './DecodeEditor';\nimport Rules from '../components/Rules';\nimport './SinglePlayer.css';\n\nclass SinglePlayer extends React.Component {\n  render() {\n    return (\n      <div className=\"container\">\n        <Rules></Rules>\n        <DecodeEditor></DecodeEditor>\n      </div>\n    );\n  }\n}\n\nexport default SinglePlayer;","import defaultSettings from './GameSettings';\n\nclass GameState {\n  constructor(settings = defaultSettings, code = [], possibleCodes = [], nextGuess = [], prevGuesses = [], prevAnswers = [], broken = false) {\n    this.settings = settings;\n    this.code = code;\n    this.possibleCodes = possibleCodes;\n    this.nextGuess = nextGuess;\n    this.prevGuesses = prevGuesses;\n    this.prevAnswers = prevAnswers;\n    this.broken = broken;\n  }\n}\n\nexport default GameState;","import defaultSettings from './GameSettings';\n\nclass CodeMaker {\n\n  constructor(settings = defaultSettings) {\n    this.settings = settings;\n  }\n\n  createRandom() {\n    let code = [];\n    for (let i = 0; i < this.settings.codeLength; i++) {\n      code.push(this.randomDigit());\n    }\n    return code;\n  }\n\n  createManual(code) {\n    const newCode = Array.from(code);\n    this.validateCode(newCode);\n    return newCode;\n  }\n\n  resetCode(code) {\n    if (code.length === 0) {\n      throw new Error(\"Code is aleady empty\");\n    }\n    return [];\n  }\n\n  appendCodeToken(code, value) {\n    if (!(code.length < this.settings.codeLength)) {\n      throw new RangeError(`Code is at maximum length ${this.settings.codeLength}`);\n    }\n    this.validateCodeToken(value);\n    const newCode = Array.from(code);\n    newCode.push(value);\n    return newCode;\n  }\n\n  removeCodeToken(code) {\n    if (code.length === 0) {\n      throw new RangeError(\"Code is already empty\");\n    }\n    const newCode = Array.from(code);\n    newCode.pop();\n    return newCode;\n  }\n\n  randomDigit() {\n    return Math.floor(Math.random() * (this.settings.codeMaximumDigit + 1));\n  }\n\n  validateCodeToken(value) {\n    if (!(value >= 0 && value <= this.settings.codeMaximumDigit)) {\n      throw new Error(`Code token must be digit between 0 and ${this.settings.codeMaximumDigit}`);\n    }\n  }\n\n  validateCode(code) {\n    if (code.length !== this.settings.codeLength) {\n      throw new Error(`Code must be array of length ${this.settings.codeLength}`);\n    }\n    code.forEach(value => {\n      this.validateCodeToken(value);\n    });\n  }\n}\n\nexport default CodeMaker;","import GameState from './GameState';\nimport CodeMaker from './CodeMaker';\nimport CodeBreaker from './CodeBreaker';\nimport GameCombinatorics from './GameCombinatorics';\n\nclass GameFlow {\n  constructor(state = new GameState()) {\n    this.state = state;\n  }\n\n  isActive() {\n    return this.state.code.length > 0\n      && this.state.broken !== true\n      && this.state.prevGuesses.length < this.state.settings.maximumGuessCount;\n  }\n\n  isSuccess() {\n    return this.state.broken === true;\n  }\n\n  isFailure() {\n    return this.state.broken !== true\n      && this.state.prevGuesses.length >= this.state.settings.maximumGuessCount;\n  }\n\n  copyAndPush(source, item) {\n    const copied = Array.from(source);\n    copied.push(Array.from(item));\n    return copied;\n  }\n\n  checkGuess() {\n    const {\n      settings,\n      code,\n      possibleCodes,\n      nextGuess: guess\n    } = this.state;\n    const breaker = new CodeBreaker(settings);\n    const answer = breaker.checkGuess(code, guess);\n    const broken = answer[0] === settings.codeLength;\n    const combinatorics = new GameCombinatorics(settings);\n    this.state = Object.assign({}, this.state, {\n      possibleCodes: combinatorics.filterPermutationsByAnswer(possibleCodes, guess, answer),\n      nextGuess: [],\n      prevGuesses: this.copyAndPush(this.state.prevGuesses, guess),\n      prevAnswers: this.copyAndPush(this.state.prevAnswers, answer),\n      broken: broken\n    });\n  }\n\n  removeGuessToken() {\n    const maker = new CodeMaker(this.state.settings);\n    const nextGuess = maker.removeCodeToken(this.state.nextGuess);\n    this.state = Object.assign({}, this.state, {\n      nextGuess: nextGuess\n    });\n  }\n\n  newGame() {\n    const maker = new CodeMaker(this.state.settings);\n    const randomCode = maker.createRandom();\n    const combinatorics = new GameCombinatorics(this.state.settings);\n    const possibleCodes = combinatorics.generatePermutations();\n    this.state = new GameState(this.state.settings, randomCode, possibleCodes);\n  }\n\n  randomGuess() {\n    const maker = new CodeMaker(this.state.settings);\n    const randomGuess = maker.createRandom();\n    this.state = Object.assign({}, this.state, {\n      nextGuess: randomGuess\n    });\n  }\n\n  resetGuess() {\n    const maker = new CodeMaker(this.state.settings);\n    const resetGuess = maker.resetCode(this.state.nextGuess);\n    this.state = Object.assign({}, this.state, {\n      nextGuess: resetGuess\n    });\n  }\n\n  appendGuessToken(value) {\n    const maker = new CodeMaker(this.state.settings);\n    const nextGuess = maker.appendCodeToken(this.state.nextGuess, value);\n    this.state = Object.assign({}, this.state, {\n      nextGuess: nextGuess\n    });\n  }\n\n  removeCodeToken() {\n    const maker = new CodeMaker(this.state.settings);\n    const code = maker.removeCodeToken(this.state.code);\n    this.state = Object.assign({}, this.state, {\n      code: code\n    });\n  }\n\n  randomCode() {\n    const maker = new CodeMaker(this.state.settings);\n    const randomCode = maker.createRandom();\n    this.state = Object.assign({}, this.state, {\n      code: randomCode\n    });\n  }\n\n  resetCode() {\n    const maker = new CodeMaker(this.state.settings);\n    const resetCode = maker.resetCode(this.state.code);\n    this.state = Object.assign({}, this.state, {\n      code: resetCode\n    });\n  }\n\n  saveCode() {\n    const maker = new CodeMaker(this.state.settings);\n    const savedCode = maker.createManual(this.state.code);\n    this.state = Object.assign({}, this.state, {\n      code: savedCode\n    });\n  }\n\n  appendCodeToken(value) {\n    const maker = new CodeMaker(this.state.settings);\n    const newCode = maker.appendCodeToken(this.state.code, value);\n    this.state = Object.assign({}, this.state, {\n      code: newCode\n    });\n  }\n}\n\nexport default GameFlow;","import * as types from '../actions/ActionTypes';\nimport GameState from '../game/GameState';\nimport GameFlow from '../game/GameFlow';\n\nfunction game(state = new GameState(), action) {\n  const flow = new GameFlow(state);\n  switch (action.type) {\n    case types.breaker.CHECK_GUESS:\n      flow.checkGuess();\n      return flow.state;\n    case types.breaker.REMOVE_GUESS_TOKEN:\n      flow.removeGuessToken();\n      return flow.state;\n    case types.breaker.NEW_GAME:\n      flow.newGame();\n      return flow.state;\n    case types.breaker.RANDOM_GUESS:\n      flow.randomGuess();\n      return flow.state;\n    case types.breaker.RESET_GUESS:\n      flow.resetGuess();\n      return flow.state;\n    case types.breaker.APPEND_GUESS_TOKEN:\n      flow.appendGuessToken(action.value);\n      return flow.state;\n    case types.maker.REMOVE_CODE_TOKEN:\n      flow.removeCodeToken();\n      return flow.state;\n    case types.maker.RANDOM_CODE:\n      flow.randomCode();\n      return flow.state;\n    case types.maker.RESET_CODE:\n      flow.resetCode();\n      return flow.state;\n    case types.maker.SAVE_CODE:\n      flow.saveCode();\n      return flow.state;\n    case types.maker.APPEND_CODE_TOKEN:\n      flow.appendCodeToken(action.value);\n      return flow.state;\n    default:\n      return state;\n  }\n}\n\nexport default game;","import React from 'react';\nimport { Provider } from 'react-redux'\nimport { createStore } from 'redux'\nimport Header from './components/Header';\nimport Footer from './components/Footer';\nimport SinglePlayer from './containers/SinglePlayer';\nimport gameReducers from './reducers/Reducers';\nimport * as actions from './actions/ActionCreators';\nimport './App.css';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.store = createStore(gameReducers);\n  }\n  componentDidMount() {\n    this.store.dispatch(actions.newGame());\n  }\n  render() {\n    return (\n      <Provider store={this.store}>\n        <div className=\"App\">\n          <Header></Header>\n          <SinglePlayer></SinglePlayer>\n          <Footer></Footer>\n        </div>\n      </Provider>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}