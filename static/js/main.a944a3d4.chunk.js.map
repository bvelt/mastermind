{"version":3,"sources":["../../../../combinatorics/build/index.js","components/Header.js","components/Footer.js","components/CodePeg.js","components/IconButton.js","components/CodePegList.js","components/KeyPeg.js","components/KeyPegGrid.js","components/DecodeGrid.js","components/Button.js","game/GameSettings.js","game/CodeBreaker.js","game/GameCombinatorics.js","components/Assist.js","actions/ActionTypes.js","actions/ActionCreators.js","containers/DecodeEditor.js","components/Rules.js","containers/SinglePlayer.js","game/GameState.js","game/CodeMaker.js","game/GameFlow.js","reducers/Reducers.js","App.js","serviceWorker.js","index.js"],"names":["Object","defineProperty","exports","value","tslib_1","__webpack_require__","factorial","n","Error","result","i","distinctElements","elements","e_1","_a","distinct","Array","elements_1","__values","elements_1_1","next","done","element","indexOf","push","e_1_1","error","return","call","grayCodeOrder","length","levels","level","prev","j","unshift","concat","numberOfPermutations","numberOfElements","withReplacement","Math","pow","numberOfSubsets","allowEmptySet","numberOfCombinations","enumeratePermutations","e_2","e_3","_b","slot","elements_2","elements_2_1","_c","_d","e_3_1","e_2_1","enumerateSubsets","_loop_1","pos","e_4","e_5","forEach","x","iprev","distinct_1","distinct_1_1","__spread","e_5_1","e_4_1","flat","enumerateCombinations","_loop_2","e_6","e_7","distinct_2","distinct_2_1","inext","e_7_1","e_6_1","grayCodeOrderHavingOnes","numberOfOnes","filter","code","reduce","xs","Header","react_default","a","createElement","className","alt","src","React","Component","Footer","href","CodePeg","_this$props","this","props","_this$props$value","EMPTY_VALUE","_this$props$isClickab","isClickable","_this$props$onClick","onClick","color","colorOf","last","arguments","undefined","COLORS","slice","IconButton","icon","_this$props$isDisable","isDisabled","type","title","disabled","ICONS","CodePegList","_this$props$values","values","toConsumableArray","colors","keys","_this$props$isSelecta","isSelectable","_this$props$onSelect","onSelect","_this$props$onCheck","onCheck","_this$props$onDelete","onDelete","_this$props$onRandom","onRandom","_this$props$onReset","onReset","items","key","src_components_CodePeg","src_components_IconButton","KeyPeg","defaultValue","NAMES","name","KeyPegGrid","_this$props$answer","answer","_this$props$answer2","slicedToArray","position","_this$props$length","fill","valueOf","src_components_KeyPeg","DecodeGrid","_this$props$remaining","remainingGuessCount","_this$props$guesses","guesses","_this$props$answers","answers","trs","tds","src_components_KeyPegGrid","solution","Button","label","GameSettings","codeLength","DEFAULT_CODE_LENGTH","codeMaximumDigit","DEFAULT_CODE_MAXIMUM_DIGIT","maximumGuessCount","DEFAULT_MAXIMUM_GUESS_COUNT","classCallCheck","defaultSettings","CodeBreaker","settings","guess","ys","shift","y","GameCombinatorics","comb","codes","prevGuess","prevAnswer","breaker","filtered","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","Symbol","iterator","checkGuess","err","reduced","filterPermutationsByAnswer","dimx","dimy","pivot","Assist","_this","possibleConstructorReturn","getPrototypeOf","handleToggle","bind","assertThisInitialized","state","opened","_this2","_this$props$onToggle","onToggle","nextOpened","setState","assign","_this$props$possibleC","possibleCodes","rows","map","lis","colSpan","CHECK_GUESS","REMOVE_GUESS_TOKEN","NEW_GAME","RANDOM_GUESS","RESET_GUESS","APPEND_GUESS_TOKEN","maker","REMOVE_CODE_TOKEN","RANDOM_CODE","RESET_CODE","SAVE_CODE","APPEND_CODE_TOKEN","newGame","types","DecodeEditor","handleSelect","handleReset","handleRandom","handleDelete","handleCheck","handleNewGame","nextGuess","dispatch","actions","_this$props2","_this$props3","_this$props4","prevGuesses","padded","from","_this$props5","prevAnswers","broken","active","message","padRight","newGameButton","role","aria-label","src_components_Button","src_components_CodePegList","src_components_DecodeGrid","src_components_Assist","connect","Rules","toggleRules","open","SinglePlayer","src_components_Rules","src_containers_DecodeEditor","GameState","CodeMaker","randomDigit","newCode","validateCode","RangeError","validateCodeToken","pop","floor","random","GameFlow","source","item","copied","_this$state","combinatorics","copyAndPush","removeCodeToken","randomCode","createRandom","generatePermutations","randomGuess","resetGuess","resetCode","appendCodeToken","savedCode","createManual","game","action","flow","removeGuessToken","appendGuessToken","saveCode","App","store","createStore","gameReducers","es","src_components_Header","src_containers_SinglePlayer","src_components_Footer","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a944a3d4.chunk.js","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar tslib_1 = require(\"tslib\");\n\nfunction factorial(n) {\n  if (n < 0) {\n    throw new Error(\"Factorial of negative number \" + n + \" is not defined\");\n  }\n\n  var result = 1;\n\n  for (var i = n; i > 1; i--) {\n    result *= i;\n  }\n\n  return result;\n}\n\nexports.factorial = factorial;\n\nfunction numberOfPermutations(numberOfElements, length, withReplacement) {\n  if (length === void 0) {\n    length = numberOfElements;\n  }\n\n  if (withReplacement === void 0) {\n    withReplacement = true;\n  }\n\n  if (numberOfElements < 0) {\n    throw new Error(\"Number of elements must be greater than or equal to 0. Received \" + numberOfElements + \".\");\n  }\n\n  if (length < 0) {\n    throw new Error(\"Length of permutation must be greater than or equal to 0. Received \" + length + \".\");\n  }\n\n  if (withReplacement) {\n    return Math.pow(numberOfElements, length);\n  }\n\n  if (length > numberOfElements) {\n    throw new Error(\"Length of permutation \" + length + \" must be greater than or equal to number of elements \" + numberOfElements + \" if elements cannot repeat\");\n  }\n\n  return factorial(numberOfElements) / factorial(numberOfElements - length);\n}\n\nexports.numberOfPermutations = numberOfPermutations;\n\nfunction numberOfSubsets(numberOfElements, allowEmptySet) {\n  if (allowEmptySet === void 0) {\n    allowEmptySet = true;\n  }\n\n  if (numberOfElements < 0) {\n    throw new Error(\"Number of elements must be greater than or equal to 0. Received \" + numberOfElements + \".\");\n  }\n\n  var n = Math.pow(2, numberOfElements);\n\n  if (!allowEmptySet) {\n    n--;\n  }\n\n  return n;\n}\n\nexports.numberOfSubsets = numberOfSubsets;\n\nfunction numberOfCombinations(numberOfElements, length, withReplacement) {\n  if (length === void 0) {\n    length = numberOfElements;\n  }\n\n  if (withReplacement === void 0) {\n    withReplacement = true;\n  }\n\n  if (numberOfElements < 0) {\n    throw new Error(\"Number of elements must be greater than or equal to 0. Received \" + numberOfElements + \".\");\n  }\n\n  if (length < 0) {\n    throw new Error(\"Length of combination must be greater than or equal to 0. Received \" + length + \".\");\n  }\n\n  if (!withReplacement && length > numberOfElements) {\n    throw new Error(\"Length of combination \" + length + \" must be greater than or equal to number of elements \" + numberOfElements + \" if elements cannot repeat\");\n  }\n\n  var n = withReplacement ? numberOfElements + length - 1 : numberOfElements;\n  return factorial(n) / (factorial(length) * factorial(n - length));\n}\n\nexports.numberOfCombinations = numberOfCombinations;\n\nfunction distinctElements(elements) {\n  var e_1, _a;\n\n  var distinct = Array();\n\n  try {\n    for (var elements_1 = tslib_1.__values(elements), elements_1_1 = elements_1.next(); !elements_1_1.done; elements_1_1 = elements_1.next()) {\n      var element = elements_1_1.value;\n\n      if (distinct.indexOf(element) === -1) {\n        distinct.push(element);\n      }\n    }\n  } catch (e_1_1) {\n    e_1 = {\n      error: e_1_1\n    };\n  } finally {\n    try {\n      if (elements_1_1 && !elements_1_1.done && (_a = elements_1.return)) _a.call(elements_1);\n    } finally {\n      if (e_1) throw e_1.error;\n    }\n  }\n\n  return distinct;\n}\n\nexports.distinctElements = distinctElements;\n\nfunction enumeratePermutations(elements, length, withReplacement) {\n  var e_2, _a, e_3, _b;\n\n  if (length === void 0) {\n    length = elements.length;\n  }\n\n  if (withReplacement === void 0) {\n    withReplacement = true;\n  }\n\n  if (length < 0) {\n    throw new Error(\"Length of permutation must be greater than or equal to 0. Received \" + length + \".\");\n  }\n\n  var distinct = distinctElements(elements);\n\n  if (!withReplacement && length > distinct.length) {\n    throw new Error(\"Length of permutation \" + length + \" must be greater than or equal to number of distinct elements \" + distinct.length + \" if elements cannot repeat\");\n  }\n\n  var levels = new Array();\n\n  for (var slot = 0; slot < length; slot++) {\n    var level = new Array();\n\n    try {\n      for (var elements_2 = tslib_1.__values(elements), elements_2_1 = elements_2.next(); !elements_2_1.done; elements_2_1 = elements_2.next()) {\n        var next = elements_2_1.value;\n\n        if (slot === 0) {\n          level.push([next]);\n        } else {\n          try {\n            for (var _c = tslib_1.__values(levels[slot - 1]), _d = _c.next(); !_d.done; _d = _c.next()) {\n              var prev = _d.value;\n\n              if (withReplacement || prev.indexOf(next) === -1) {\n                level.push([next].concat(prev));\n              }\n            }\n          } catch (e_3_1) {\n            e_3 = {\n              error: e_3_1\n            };\n          } finally {\n            try {\n              if (_d && !_d.done && (_b = _c.return)) _b.call(_c);\n            } finally {\n              if (e_3) throw e_3.error;\n            }\n          }\n        }\n      }\n    } catch (e_2_1) {\n      e_2 = {\n        error: e_2_1\n      };\n    } finally {\n      try {\n        if (elements_2_1 && !elements_2_1.done && (_a = elements_2.return)) _a.call(elements_2);\n      } finally {\n        if (e_2) throw e_2.error;\n      }\n    }\n\n    levels.push(level);\n  }\n\n  return levels[length - 1];\n}\n\nexports.enumeratePermutations = enumeratePermutations;\n\nfunction enumerateSubsets(elements, allowEmptySet) {\n  if (allowEmptySet === void 0) {\n    allowEmptySet = true;\n  }\n\n  var distinct = distinctElements(elements);\n  var levels = new Array();\n\n  var _loop_1 = function _loop_1(pos) {\n    var e_4, _a, e_5, _b;\n\n    var level = new Array();\n\n    if (pos === 0) {\n      distinct.forEach(function (x) {\n        return level.push([x]);\n      });\n    } else {\n      try {\n        for (var _c = tslib_1.__values(levels[pos - 1]), _d = _c.next(); !_d.done; _d = _c.next()) {\n          var prev = _d.value;\n          var iprev = distinct.indexOf(prev[pos - 1]);\n\n          try {\n            for (var distinct_1 = tslib_1.__values(distinct), distinct_1_1 = distinct_1.next(); !distinct_1_1.done; distinct_1_1 = distinct_1.next()) {\n              var next = distinct_1_1.value;\n\n              if (distinct.indexOf(next) > iprev) {\n                level.push(tslib_1.__spread(prev, [next]));\n              }\n            }\n          } catch (e_5_1) {\n            e_5 = {\n              error: e_5_1\n            };\n          } finally {\n            try {\n              if (distinct_1_1 && !distinct_1_1.done && (_b = distinct_1.return)) _b.call(distinct_1);\n            } finally {\n              if (e_5) throw e_5.error;\n            }\n          }\n        }\n      } catch (e_4_1) {\n        e_4 = {\n          error: e_4_1\n        };\n      } finally {\n        try {\n          if (_d && !_d.done && (_a = _c.return)) _a.call(_c);\n        } finally {\n          if (e_4) throw e_4.error;\n        }\n      }\n    }\n\n    levels.push(level);\n  };\n\n  for (var pos = 0; pos < distinct.length; pos++) {\n    _loop_1(pos);\n  }\n\n  if (allowEmptySet) {\n    levels.unshift([new Array()]);\n  }\n\n  return levels.flat();\n}\n\nexports.enumerateSubsets = enumerateSubsets;\n\nfunction enumerateCombinations(elements, length, withReplacement) {\n  if (length === void 0) {\n    length = elements.length;\n  }\n\n  if (withReplacement === void 0) {\n    withReplacement = true;\n  }\n\n  if (length === 0) {\n    return [[]];\n  }\n\n  if (length < 0) {\n    throw new Error(\"Length of combination must be greater than or equal to 0. Received \" + length + \".\");\n  }\n\n  var distinct = distinctElements(elements);\n\n  if (!withReplacement && length > distinct.length) {\n    throw new Error(\"Length of combination \" + length + \" must be greater than or equal to number of distinct elements \" + distinct.length + \" if elements cannot repeat\");\n  }\n\n  var levels = new Array();\n\n  var _loop_2 = function _loop_2(pos) {\n    var e_6, _a, e_7, _b;\n\n    var level = new Array();\n\n    if (pos === 0) {\n      distinct.forEach(function (x) {\n        return level.push([x]);\n      });\n    } else {\n      try {\n        for (var _c = tslib_1.__values(levels[pos - 1]), _d = _c.next(); !_d.done; _d = _c.next()) {\n          var prev = _d.value;\n          var iprev = distinct.indexOf(prev[pos - 1]);\n\n          try {\n            for (var distinct_2 = tslib_1.__values(distinct), distinct_2_1 = distinct_2.next(); !distinct_2_1.done; distinct_2_1 = distinct_2.next()) {\n              var next = distinct_2_1.value;\n              var inext = distinct.indexOf(next);\n\n              if (inext > iprev || withReplacement && inext === iprev) {\n                level.push(tslib_1.__spread(prev, [next]));\n              }\n            }\n          } catch (e_7_1) {\n            e_7 = {\n              error: e_7_1\n            };\n          } finally {\n            try {\n              if (distinct_2_1 && !distinct_2_1.done && (_b = distinct_2.return)) _b.call(distinct_2);\n            } finally {\n              if (e_7) throw e_7.error;\n            }\n          }\n        }\n      } catch (e_6_1) {\n        e_6 = {\n          error: e_6_1\n        };\n      } finally {\n        try {\n          if (_d && !_d.done && (_a = _c.return)) _a.call(_c);\n        } finally {\n          if (e_6) throw e_6.error;\n        }\n      }\n    }\n\n    levels.push(level);\n  };\n\n  for (var pos = 0; pos < length; pos++) {\n    _loop_2(pos);\n  }\n\n  return levels[length - 1];\n}\n\nexports.enumerateCombinations = enumerateCombinations;\n\nfunction grayCodeOrder(length) {\n  if (length === void 0) {\n    length = 1;\n  }\n\n  if (length < 1) {\n    throw new Error(\"Gray code order of length \" + length + \" undefined\");\n  }\n\n  var levels = new Array();\n\n  for (var i = 0; i < length; i++) {\n    var level = new Array();\n\n    if (i === 0) {\n      level.push([0]);\n      level.push([1]);\n    } else {\n      var prev = levels[i - 1];\n\n      for (var j = prev.length - 1; j >= 0; j--) {\n        level.unshift([0].concat(prev[j]));\n        level.push([1].concat(prev[j]));\n      }\n    }\n\n    levels.push(level);\n  }\n\n  return levels[length - 1];\n}\n\nexports.grayCodeOrder = grayCodeOrder;\n\nfunction grayCodeOrderHavingOnes(length, numberOfOnes) {\n  if (numberOfOnes < 0) {\n    throw new Error(\"Number of ones \" + numberOfOnes + \" must be greater than or equal to zero\");\n  }\n\n  if (numberOfOnes > length) {\n    throw new Error(\"Number of ones \" + numberOfOnes + \" must be less than or equal to length of code \" + length);\n  }\n\n  return grayCodeOrder(length).filter(function (code) {\n    return code.reduce(function (xs, x) {\n      return xs + x;\n    }) === numberOfOnes;\n  });\n}\n\nexports.grayCodeOrderHavingOnes = grayCodeOrderHavingOnes;","import React from 'react';\nimport './Header.css';\n\nclass Header extends React.Component {\n  render() {\n    return (\n      <div className=\"header\">\n        <img className=\"logo\" alt=\"Logo\" src=\"assets/Logo.png\" />\n      </div>\n    );\n  }\n}\n\nexport default Header;","import React from 'react';\nimport './Footer.css';\n\nclass Footer extends React.Component {\n  render() {\n    return (\n      <div className=\"footer\">\n        <a alt=\"About\" href=\"https://github.com/bvelt/mastermind\">About</a>\n      </div>\n    );\n  }\n}\n\nexport default Footer;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './CodePeg.css';\n\nclass CodePeg extends React.Component {\n  static propTypes = {\n    value: PropTypes.number,\n    isClickable: PropTypes.bool,\n    onClick: PropTypes.func\n  };\n\n  static COLORS = ['blue', 'green', 'orange', 'purple', 'red', 'yellow', 'empty'];\n  static EMPTY_VALUE = 6;\n\n  static defaultValue() {\n    return CodePeg.EMPTY_VALUE;\n  }\n\n  static colors(includeEmpty = false) {\n    const last = includeEmpty ? CodePeg.EMPTY_VALUE + 1 : CodePeg.EMPTY_VALUE;\n    return CodePeg.COLORS.slice(0, last);\n  }\n\n  static colorOf(value) {\n    return CodePeg.COLORS[value];\n  }\n\n  render() {\n    const {\n      value = CodePeg.EMPTY_VALUE,\n      isClickable = false,\n      onClick = () => false\n    } = this.props;\n    const color = CodePeg.colorOf(value);\n    return (\n      <span\n        className={`codePeg codePeg__${color} ${isClickable ? 'codePeg__selectable' : ''}`}\n        onClick={isClickable ? () => onClick(value) : () => false}></span>\n    );\n  }\n}\n\nexport default CodePeg;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './IconButton.css';\n\nclass IconButton extends React.Component {\n  static propTypes = {\n    icon: PropTypes.string.isRequired,\n    isDisabled: PropTypes.bool,\n    onClick: PropTypes.func\n  };\n\n  static ICONS = ['check', 'delete', 'random', 'reset', 'close', 'info'];\n\n  render() {\n    const {\n      icon,\n      isDisabled = false,\n      onClick = () => false\n    } = this.props;\n    return (\n      <button type={'button'}\n        title={icon}\n        className={`iconButton ${icon} ${isDisabled ? 'iconButton__disabled' : ''}`}\n        disabled={isDisabled}\n        onClick={!isDisabled ? onClick : () => false}>\n        <img src={`assets/${icon}.png`} alt={icon}/>\n      </button>\n    );\n  }\n}\n\nexport default IconButton;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport CodePeg from './CodePeg';\nimport IconButton from './IconButton';\nimport './CodePegList.css';\n\nclass CodePegList extends React.Component {\n  static propTypes = {\n    values: PropTypes.array,\n    isSelectable: PropTypes.bool,\n    onSelect: PropTypes.func,\n    onCheck: PropTypes.func,\n    onDelete: PropTypes.func,\n    onRandom: PropTypes.func,\n    onReset: PropTypes.func\n  };\n\n  render() {\n    const {\n      values = [...CodePeg.colors().keys()],\n      isSelectable = false,\n      onSelect = () => false,\n      onCheck = () => false,\n      onDelete = () => false,\n      onRandom = () => false,\n      onReset = () => false\n    } = this.props;\n\n    let items = [];\n    for (let i = 0; i < values.length; i++) {\n      items.push(\n        <li key={i}>\n          <CodePeg value={values[i]}\n            isClickable={isSelectable}\n            onClick={onSelect}></CodePeg>\n        </li>\n      );\n    }\n\n    return (\n      <div className=\"codePegList\">\n        <ul className=\"picker\">\n          {items}\n          <li key={values.length} className={'check'}>\n            <IconButton icon={'check'}\n              isDisabled={isSelectable}\n              onClick={onCheck}></IconButton>\n          </li>\n        </ul>\n        <ul className=\"buttons\">\n          <li>\n            <IconButton icon={'random'}\n              onClick={onRandom}></IconButton>\n          </li>\n          <li>\n            <IconButton icon={'delete'}\n              onClick={onDelete}></IconButton>\n          </li>\n          <li>\n            <IconButton icon={'reset'}\n              onClick={onReset}></IconButton>\n          </li>\n        </ul>\n      </div>\n    );\n  }\n}\n\nexport default CodePegList;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './KeyPeg.css';\n\nclass KeyPeg extends React.Component {\n  static propTypes = {\n    value: PropTypes.number\n  };\n\n  static NAMES = ['position', 'color', 'none']\n\n  static defaultValue() {\n    return KeyPeg.NAMES.indexOf('none');\n  }\n\n  static valueOf(name) {\n    return KeyPeg.NAMES.indexOf(name);\n  }\n\n  render() {\n    const {\n      value = KeyPeg.defaultValue()\n    } = this.props;\n\n    return (\n      <span className={`keyPeg keyPeg__${KeyPeg.NAMES[value]}`}></span>\n    );\n  }\n}\n\nexport default KeyPeg;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport KeyPeg from './KeyPeg';\nimport './KeyPegGrid.css';\n\nclass KeyPegGrid extends React.Component {\n  static propTypes = {\n    length: PropTypes.number,\n    answer: PropTypes.array\n  };\n\n  render() {\n    let {\n      answer: [position, color] = [0, 0],\n      length = 4\n    } = this.props;\n\n    const values = Array(length).fill(KeyPeg.defaultValue());\n    while (color-- > 0) {\n      values.unshift(KeyPeg.valueOf('color'));\n    }\n    while (position-- > 0) {\n      values.unshift(KeyPeg.valueOf('position'));\n    }\n\n    const items = [];\n    for (let i = 0; i < length; i++) {\n      items.push(\n        <li key={i}><KeyPeg value={values[i]}></KeyPeg></li>\n      );\n    }\n\n    return (\n      <ul className=\"keyPegGrid\">\n        {items}\n      </ul>\n    );\n  }\n}\n\nexport default KeyPegGrid;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport CodePeg from './CodePeg';\nimport KeyPegGrid from './KeyPegGrid';\nimport './DecodeGrid.css';\n\nclass DecodeGrid extends React.Component {\n  static propTypes = {\n    remainingGuessCount: PropTypes.number,\n    guesses: PropTypes.array,\n    answers: PropTypes.array,\n  };\n\n  render() {\n    const {\n      remainingGuessCount = 0,\n      guesses = [],\n      answers = []\n    } = this.props;\n\n    const trs = [];\n    for (let i = 0; i < guesses.length; i++) {\n      const tds = [];\n\n      tds.push(\n        <td key={`h$(i}`} className=\"rowHead\">{i + 1}</td>\n      );\n\n      for (let j = 0; j < guesses[i].length; j++) {\n        tds.push(\n          <td key={`cp${j}`}><CodePeg value={guesses[i][j]}></CodePeg></td>\n        );\n      }\n\n      tds.push(\n        <td key={`kg${i}`} className=\"keys\"><KeyPegGrid answer={answers[i]} length={guesses[i].length}></KeyPegGrid></td>\n      );\n\n      const solution = answers[i][0] === guesses[i].length;\n      trs.push(\n        <tr className={`decodeRow ${solution === true ? 'solution' : ''}`} key={i}>{tds}</tr>\n      );\n    }\n\n    return (\n      <div className=\"decodeGrid\">\n        <div className=\"caption\">\n          <span>{remainingGuessCount} guess{remainingGuessCount !== 1 ? 'es' : ''} remaining</span>\n        </div>\n        <table>\n          <tbody>\n            {trs}\n          </tbody>\n        </table>\n      </div>\n    );\n  }\n}\n\nexport default DecodeGrid;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './Button.css';\n\nclass Button extends React.Component {\n  static propTypes = {\n    label: PropTypes.string.isRequired,\n    isDisabled: PropTypes.bool,\n    onClick: PropTypes.func\n  };\n  render() {\n    const {\n      label,\n      isDisabled = false,\n      onClick = () => false\n    } = this.props;\n    return (\n      <button type={'button'}\n        className={`button ${isDisabled ? 'button__disabled' : ''}`}\n        disabled={isDisabled}\n        onClick={!isDisabled ? onClick : () => false}>\n        {label}\n      </button>\n    );\n  }\n}\n\nexport default Button;","\nclass GameSettings {\n\n  static DEFAULT_CODE_LENGTH = 4;\n  static DEFAULT_CODE_MAXIMUM_DIGIT = 5;\n  static DEFAULT_MAXIMUM_GUESS_COUNT = 10;\n\n  constructor(codeLength = GameSettings.DEFAULT_CODE_LENGTH,\n    codeMaximumDigit = GameSettings.DEFAULT_CODE_MAXIMUM_DIGIT,\n    maximumGuessCount = GameSettings.DEFAULT_MAXIMUM_GUESS_COUNT) {\n    this.codeLength = codeLength;\n    this.codeMaximumDigit = codeMaximumDigit;\n    this.maximumGuessCount = maximumGuessCount;\n  }\n}\n\nconst defaultSettings = new GameSettings();\n\nexport default defaultSettings;","import defaultSettings from './GameSettings';\n\nclass CodeBreaker {\n\n  constructor(settings = defaultSettings) {\n    this.settings = settings;\n  }\n\n  checkGuess(code, guess) {\n    if (!(code.length === guess.length)) {\n      throw new Error(`Guess length ${guess.length} must be equal to code length ${code.length}`);\n    }\n\n    const answer = [0, 0];\n    const xs = [];\n    const ys = [];\n\n    for (let i = 0; i < code.length; i++) {\n      if (code[i] === guess[i]) {\n        answer[0]++;\n      } else {\n        xs.push(code[i]);\n        ys.push(guess[i]);\n      }\n    }\n\n    while (xs.length > 0) {\n      let x = xs.shift();\n      for (let i = 0; i < ys.length; i++) {\n        let y = ys.shift();\n        if (x === y) {\n          answer[1]++;\n          break;\n        } else {\n          ys.push(y);\n        }\n      }\n    }\n\n    return answer;\n  }\n}\n\nexport default CodeBreaker;","import CodeBreaker from './CodeBreaker';\nimport * as comb from 'applied-combinatorics';\nimport defaultSettings from './GameSettings';\n\nclass GameCombinatorics {\n  constructor(settings = defaultSettings) {\n    this.settings = settings;\n  }\n\n  generatePermutations() {\n    const elements = [];\n    for (let i = 0; i <= this.settings.codeMaximumDigit; i++) {\n      elements.push(i);\n    }\n    const length = this.settings.codeLength;\n\n    return comb.enumeratePermutations(elements, length, true);\n  }\n\n  filterPermutationsByAnswer(codes, prevGuess, prevAnswer) {\n    const breaker = new CodeBreaker(this.settings);\n\n    const filtered = [];\n    for (let code of codes) {\n      const answer = breaker.checkGuess(code, prevGuess);\n      if (answer[0] === prevAnswer[0] &&\n        answer[1] === prevAnswer[1]) {\n        filtered.push(code);\n      }\n    }\n\n    return filtered;\n  }\n\n  reducePermutations(codes, guesses, answers) {\n    let reduced = codes;\n    for (let i = 0; i < guesses.length; i++) {\n      reduced = this.filterPermutationsByAnswer(reduced, guesses[i], answers[i]);\n    }\n    return reduced;\n  }\n\n  pivot(codes) {\n    const dimx = this.settings.codeLength + 1;\n    const dimy = this.settings.codeMaximumDigit + 1;\n    const pivot = [];\n    for (let y = 0; y < dimy; y++) {\n      pivot.push(Array(dimx).fill(0));\n    }\n    for (let i = 0; i < codes.length; i++) {\n      for (let j = 0; j < codes[i].length; j++) {\n        pivot[codes[i][j]][j]++;\n      }\n      for (let j = 0; j < dimy; j++) {\n        if (codes[i].indexOf(j) > -1) {\n          pivot[j][dimx - 1]++;\n        }\n      }\n    }\n    return pivot;\n  }\n}\n\nexport default GameCombinatorics;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport GameCombinatorics from '../game/GameCombinatorics';\nimport CodePeg from './CodePeg';\nimport IconButton from './IconButton';\nimport './Assist.css';\n\nclass Assist extends React.Component {\n  static propTypes = {\n    opened: PropTypes.bool,\n    onToggle: PropTypes.func,\n    possibleCodes: PropTypes.array\n  };\n  constructor(props) {\n    super(props);\n    this.handleToggle = this.handleToggle.bind(this);\n    this.state = {\n      opened: props.opened || false\n    };\n  }\n\n  handleToggle() {\n    const {\n      onToggle = () => false\n    } = this.props;\n    const {\n      opened\n    } = this.state;\n    const nextOpened = opened === false;\n    this.setState(() => {\n      return Object.assign({}, this.state,\n        { opened: nextOpened });\n    });\n    onToggle(nextOpened);\n  }\n\n  render() {\n    const {\n      possibleCodes = []\n    } = this.props;\n    const {\n      opened\n    } = this.state;\n\n    const comb = new GameCombinatorics();\n    const pivot = comb.pivot(possibleCodes);\n    const rows = [];\n    for (let i = 0; i < pivot.length; i++) {\n      rows.push((\n        <tr key={i + 1}>\n          <td key=\"0\"><CodePeg value={i}></CodePeg></td>\n          {pivot[i].map((x, j) =>\n            (<td key={j + 1}>{x}</td>)\n          )}\n        </tr>\n      ));\n    }\n\n    const maxrows = 50;\n    const lis = [];\n    for (let i = 0; i < possibleCodes.length && i < maxrows; i++) {\n      lis.push((\n        <li key={i}>\n          {possibleCodes[i].map((x, j) =>\n            (<span key={j} className={`codePeg codePeg__${CodePeg.colorOf(x)}`}></span>)\n          )}\n        </li>\n      ));\n    }\n\n    return (\n      <div className=\"assistWrap\">\n        <div className={`${opened === false ? 'toggleButton' : 'toggleHidden'}`}>\n          {opened === false ?\n            <IconButton icon={'info'} onClick={this.handleToggle}></IconButton> : <span></span>}\n        </div>\n        <div className={`assist ${opened === false ? 'closed' : ''}`}>\n          <table>\n            <thead>\n              <tr>\n                <td>COLOR</td>\n                <td><CodePeg></CodePeg></td>\n                <td><CodePeg></CodePeg></td>\n                <td><CodePeg></CodePeg></td>\n                <td><CodePeg></CodePeg></td>\n                <td>TOTAL</td>\n              </tr>\n            </thead>\n            <tbody>\n              {rows}\n            </tbody>\n            <tfoot>\n              <tr className=\"total\">\n                <td colSpan=\"5\">Possible codes remaining:</td>\n                <td>{possibleCodes.length}</td>\n              </tr>\n            </tfoot>\n          </table>\n          <ul className=\"possible\">\n            {lis}\n          </ul>\n        </div>\n        {opened === true ?\n          (<div className=\"toggleButton\">\n            <IconButton icon={'close'} onClick={this.handleToggle}></IconButton>\n          </div>) : ''}\n      </div>\n    );\n  }\n}\n\nexport default Assist;","\nexport const breaker = {\n  CHECK_GUESS: \"breaker/check\",\n  REMOVE_GUESS_TOKEN: \"breaker/remove-guess-token\",\n  NEW_GAME: \"breaker/new-game\",\n  RANDOM_GUESS: \"breaker/random-guess\",\n  RESET_GUESS: \"breaker/reset-guess\",\n  APPEND_GUESS_TOKEN: \"breaker/append-guess-token\"\n};\n\nexport const maker = {\n  REMOVE_CODE_TOKEN: \"maker/remove-code-token\",\n  RANDOM_CODE: \"maker/random-code\",\n  RESET_CODE: \"maker/reset-code\",\n  SAVE_CODE: \"maker/save-code\",\n  APPEND_CODE_TOKEN: \"maker/append-code-token\"\n};","import * as types from './ActionTypes';\n\nexport function checkGuess(values) {\n  return {\n    type: types.breaker.CHECK_GUESS\n  };\n}\n\nexport function removeGuessToken() {\n  return {\n    type: types.breaker.REMOVE_GUESS_TOKEN\n  };\n}\n\nexport function newGame() {\n  return {\n    type: types.breaker.NEW_GAME\n  };\n}\n\nexport function randomGuess() {\n  return {\n    type: types.breaker.RANDOM_GUESS\n  };\n}\n\nexport function resetGuess() {\n  return {\n    type: types.breaker.RESET_GUESS\n  };\n}\n\nexport function appendGuessToken(value) {\n  return {\n    type: types.breaker.APPEND_GUESS_TOKEN,\n    value: value\n  };\n}\n\nexport function removeCodeToken() {\n  return {\n    type: types.maker.REMOVE_CODE_TOKEN\n  };\n}\n\nexport function randomCode() {\n  return {\n    type: types.maker.RANDOM_CODE\n  };\n}\n\nexport function resetCode() {\n  return {\n    type: types.maker.RESET_CODE\n  };\n}\n\nexport function saveCode() {\n  return {\n    type: types.maker.SAVE_CODE\n  };\n}\n\nexport function appendCodeToken(value) {\n  return {\n    type: types.maker.APPEND_CODE_TOKEN,\n    value: value\n  };\n}","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport CodePegList from '../components/CodePegList';\nimport CodePeg from '../components/CodePeg';\nimport DecodeGrid from '../components/DecodeGrid';\nimport Button from '../components/Button';\nimport Assist from '../components/Assist';\nimport * as actions from '../actions/ActionCreators';\nimport './DecodeEditor.css';\n\nclass DecodeEditor extends React.Component {\n  static propTypes = {\n    code: PropTypes.array,\n    possibleCodes: PropTypes.array,\n    nextGuess: PropTypes.array,\n    maximumGuessCount: PropTypes.number,\n    length: PropTypes.number,\n    prevGuesses: PropTypes.array,\n    prevAnswers: PropTypes.array,\n    onDecodeDone: PropTypes.func\n  };\n\n  constructor(props) {\n    super(props);\n    this.handleSelect = this.handleSelect.bind(this);\n    this.handleReset = this.handleReset.bind(this);\n    this.handleRandom = this.handleRandom.bind(this);\n    this.handleDelete = this.handleDelete.bind(this);\n    this.handleCheck = this.handleCheck.bind(this);\n    this.handleNewGame = this.handleNewGame.bind(this);\n  }\n\n  handleSelect(value) {\n    const {\n      nextGuess,\n      length,\n      dispatch\n    } = this.props;\n    if (nextGuess.length < length) {\n      dispatch(actions.appendGuessToken(value));\n    }\n  }\n\n  handleDelete() {\n    const {\n      nextGuess,\n      dispatch\n    } = this.props;\n    if (nextGuess.length > 0) {\n      dispatch(actions.removeGuessToken());\n    }\n  }\n\n  handleReset() {\n    const {\n      nextGuess,\n      dispatch\n    } = this.props;\n    if (nextGuess.length > 0) {\n      dispatch(actions.resetGuess());\n    }\n  }\n\n  handleRandom() {\n    const {\n      dispatch\n    } = this.props;\n    dispatch(actions.randomGuess());\n  }\n\n  handleCheck() {\n    const {\n      maximumGuessCount,\n      prevGuesses,\n      nextGuess,\n      length,\n      dispatch\n    } = this.props;\n    if (nextGuess.length === length && prevGuesses.length < maximumGuessCount) {\n      dispatch(actions.checkGuess());\n    }\n  }\n\n  handleNewGame() {\n    const {\n      dispatch\n    } = this.props;\n    dispatch(actions.newGame());\n  }\n\n  padRight(items, length, value) {\n    const padded = Array.from(items);\n    while (padded.length < length) {\n      padded.push(value);\n    }\n    return padded;\n  }\n\n  render() {\n    const {\n      code,\n      possibleCodes,\n      maximumGuessCount,\n      length,\n      nextGuess,\n      prevGuesses,\n      prevAnswers,\n      broken\n    } = this.props;\n\n    let guesses = Array.from(prevGuesses);\n    let answers = Array.from(prevAnswers);\n\n    const active = !broken && prevGuesses.length < maximumGuessCount;\n    let message = \"You broke the code!\";\n\n    if (!active && !broken) {\n      guesses.push(code);\n      answers.push([4, 0]);\n      message = \"Bummer. You failed.\";\n    } else if (active) {\n      guesses.push(this.padRight(nextGuess, length, CodePeg.defaultValue()));\n      answers.push([0, 0]);\n    }\n\n    while (guesses.length < maximumGuessCount) {\n      guesses.push(Array(length).fill(CodePeg.defaultValue()));\n      answers.push([0, 0]);\n    }\n\n    let newGameButton = '';\n    if (!active) {\n      newGameButton = (\n        <div className=\"gameover\">\n          <div className=\"message\">\n            <span className=\"emoji\" role=\"img\"\n              aria-label=\"Face\">{broken === true ? '😃' : '🙁'}</span>\n            <span className=\"text\">{message}</span>\n          </div>\n          <Button key={7} label=\"TRY AGAIN\" onClick={this.handleNewGame}></Button>\n        </div>\n      );\n    }\n\n    return (\n      <div className=\"decodeEditor\">\n        <div className=\"c1\">\n          <CodePegList key={1} values={[...CodePeg.colors().keys()]}\n            isSelectable={active && nextGuess.length < length}\n            onSelect={this.handleSelect}\n            onCheck={this.handleCheck}\n            onDelete={this.handleDelete}\n            onRandom={this.handleRandom}\n            onReset={this.handleReset}></CodePegList>\n          <DecodeGrid key={6}\n            remainingGuessCount={maximumGuessCount - prevGuesses.length}\n            guesses={guesses}\n            answers={answers}></DecodeGrid>\n          {newGameButton}\n        </div>\n        <div className=\"c2\">\n          <Assist possibleCodes={possibleCodes}></Assist>\n        </div>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    code: state.code,\n    possibleCodes: state.possibleCodes,\n    nextGuess: state.nextGuess,\n    maximumGuessCount: state.settings.maximumGuessCount,\n    length: state.settings.codeLength,\n    prevGuesses: state.prevGuesses,\n    prevAnswers: state.prevAnswers,\n    broken: state.broken\n  };\n}\n\nexport default connect(mapStateToProps)(DecodeEditor);","import React from 'react';\nimport './Rules.css';\n\nclass Rules extends React.Component {\n  constructor(props) {\n    super(props);\n    this.toggleRules = this.toggleRules.bind(this);\n    this.state = {\n      open: false\n    };\n  }\n\n  toggleRules() {\n    const {\n      open\n    } = this.state;\n    this.setState({\n      open: !open\n    });\n  }\n\n  render() {\n    const {\n      open\n    } = this.state;\n    return (\n      <div className=\"rules\">\n        <span className=\"rulesToggle\" onClick={this.toggleRules}>{open ? 'Hide ' : 'Rules'}</span>\n        <p className={open ? '' : 'hide'}>A codemaker has created a secret pattern of 4 colored pegs. A single color can be used more than once. Guess the pegs within 10 turns. A black peg is returned for each peg in your guess that matches the color and position of one peg in the pattern. A gray peg is returned for each peg that is the correct color of one peg in the pattern but the incorrect position. A match is counted only once.</p>\n      </div>\n    );\n  }\n}\n\nexport default Rules;\n","import React from 'react';\nimport DecodeEditor from './DecodeEditor';\nimport Rules from '../components/Rules';\nimport './SinglePlayer.css';\n\nclass SinglePlayer extends React.Component {\n  render() {\n    return (\n      <div className=\"container\">\n        <Rules></Rules>\n        <DecodeEditor></DecodeEditor>\n      </div>\n    );\n  }\n}\n\nexport default SinglePlayer;","import defaultSettings from './GameSettings';\n\nclass GameState {\n  constructor(settings = defaultSettings, code = [], possibleCodes = [], nextGuess = [], prevGuesses = [], prevAnswers = [], broken = false) {\n    this.settings = settings;\n    this.code = code;\n    this.possibleCodes = possibleCodes;\n    this.nextGuess = nextGuess;\n    this.prevGuesses = prevGuesses;\n    this.prevAnswers = prevAnswers;\n    this.broken = broken;\n  }\n}\n\nexport default GameState;","import defaultSettings from './GameSettings';\n\nclass CodeMaker {\n\n  constructor(settings = defaultSettings) {\n    this.settings = settings;\n  }\n\n  createRandom() {\n    let code = [];\n    for (let i = 0; i < this.settings.codeLength; i++) {\n      code.push(this.randomDigit());\n    }\n    return code;\n  }\n\n  createManual(code) {\n    const newCode = Array.from(code);\n    this.validateCode(newCode);\n    return newCode;\n  }\n\n  resetCode(code) {\n    if (code.length === 0) {\n      throw new Error(\"Code is aleady empty\");\n    }\n    return [];\n  }\n\n  appendCodeToken(code, value) {\n    if (!(code.length < this.settings.codeLength)) {\n      throw new RangeError(`Code is at maximum length ${this.settings.codeLength}`);\n    }\n    this.validateCodeToken(value);\n    const newCode = Array.from(code);\n    newCode.push(value);\n    return newCode;\n  }\n\n  removeCodeToken(code) {\n    if (code.length === 0) {\n      throw new RangeError(\"Code is already empty\");\n    }\n    const newCode = Array.from(code);\n    newCode.pop();\n    return newCode;\n  }\n\n  randomDigit() {\n    return Math.floor(Math.random() * (this.settings.codeMaximumDigit + 1));\n  }\n\n  validateCodeToken(value) {\n    if (!(value >= 0 && value <= this.settings.codeMaximumDigit)) {\n      throw new Error(`Code token must be digit between 0 and ${this.settings.codeMaximumDigit}`);\n    }\n  }\n\n  validateCode(code) {\n    if (code.length !== this.settings.codeLength) {\n      throw new Error(`Code must be array of length ${this.settings.codeLength}`);\n    }\n    code.forEach(value => {\n      this.validateCodeToken(value);\n    });\n  }\n}\n\nexport default CodeMaker;","import GameState from './GameState';\nimport CodeMaker from './CodeMaker';\nimport CodeBreaker from './CodeBreaker';\nimport GameCombinatorics from './GameCombinatorics';\n\nclass GameFlow {\n  constructor(state = new GameState()) {\n    this.state = state;\n  }\n\n  isActive() {\n    return this.state.code.length > 0\n      && this.state.broken !== true\n      && this.state.prevGuesses.length < this.state.settings.maximumGuessCount;\n  }\n\n  isSuccess() {\n    return this.state.broken === true;\n  }\n\n  isFailure() {\n    return this.state.broken !== true\n      && this.state.prevGuesses.length >= this.state.settings.maximumGuessCount;\n  }\n\n  copyAndPush(source, item) {\n    const copied = Array.from(source);\n    copied.push(Array.from(item));\n    return copied;\n  }\n\n  checkGuess() {\n    const {\n      settings,\n      code,\n      possibleCodes,\n      nextGuess: guess\n    } = this.state;\n    const breaker = new CodeBreaker(settings);\n    const answer = breaker.checkGuess(code, guess);\n    const broken = answer[0] === settings.codeLength;\n    const combinatorics = new GameCombinatorics(settings);\n    this.state = Object.assign({}, this.state, {\n      possibleCodes: combinatorics.filterPermutationsByAnswer(possibleCodes, guess, answer),\n      nextGuess: [],\n      prevGuesses: this.copyAndPush(this.state.prevGuesses, guess),\n      prevAnswers: this.copyAndPush(this.state.prevAnswers, answer),\n      broken: broken\n    });\n  }\n\n  removeGuessToken() {\n    const maker = new CodeMaker(this.state.settings);\n    const nextGuess = maker.removeCodeToken(this.state.nextGuess);\n    this.state = Object.assign({}, this.state, {\n      nextGuess: nextGuess\n    });\n  }\n\n  newGame() {\n    const maker = new CodeMaker(this.state.settings);\n    const randomCode = maker.createRandom();\n    const combinatorics = new GameCombinatorics(this.state.settings);\n    const possibleCodes = combinatorics.generatePermutations();\n    this.state = new GameState(this.state.settings, randomCode, possibleCodes);\n  }\n\n  randomGuess() {\n    const maker = new CodeMaker(this.state.settings);\n    const randomGuess = maker.createRandom();\n    this.state = Object.assign({}, this.state, {\n      nextGuess: randomGuess\n    });\n  }\n\n  resetGuess() {\n    const maker = new CodeMaker(this.state.settings);\n    const resetGuess = maker.resetCode(this.state.nextGuess);\n    this.state = Object.assign({}, this.state, {\n      nextGuess: resetGuess\n    });\n  }\n\n  appendGuessToken(value) {\n    const maker = new CodeMaker(this.state.settings);\n    const nextGuess = maker.appendCodeToken(this.state.nextGuess, value);\n    this.state = Object.assign({}, this.state, {\n      nextGuess: nextGuess\n    });\n  }\n\n  removeCodeToken() {\n    const maker = new CodeMaker(this.state.settings);\n    const code = maker.removeCodeToken(this.state.code);\n    this.state = Object.assign({}, this.state, {\n      code: code\n    });\n  }\n\n  randomCode() {\n    const maker = new CodeMaker(this.state.settings);\n    const randomCode = maker.createRandom();\n    this.state = Object.assign({}, this.state, {\n      code: randomCode\n    });\n  }\n\n  resetCode() {\n    const maker = new CodeMaker(this.state.settings);\n    const resetCode = maker.resetCode(this.state.code);\n    this.state = Object.assign({}, this.state, {\n      code: resetCode\n    });\n  }\n\n  saveCode() {\n    const maker = new CodeMaker(this.state.settings);\n    const savedCode = maker.createManual(this.state.code);\n    this.state = Object.assign({}, this.state, {\n      code: savedCode\n    });\n  }\n\n  appendCodeToken(value) {\n    const maker = new CodeMaker(this.state.settings);\n    const newCode = maker.appendCodeToken(this.state.code, value);\n    this.state = Object.assign({}, this.state, {\n      code: newCode\n    });\n  }\n}\n\nexport default GameFlow;","import * as types from '../actions/ActionTypes';\nimport GameState from '../game/GameState';\nimport GameFlow from '../game/GameFlow';\n\nfunction game(state = new GameState(), action) {\n  const flow = new GameFlow(state);\n  switch (action.type) {\n    case types.breaker.CHECK_GUESS:\n      flow.checkGuess();\n      return flow.state;\n    case types.breaker.REMOVE_GUESS_TOKEN:\n      flow.removeGuessToken();\n      return flow.state;\n    case types.breaker.NEW_GAME:\n      flow.newGame();\n      return flow.state;\n    case types.breaker.RANDOM_GUESS:\n      flow.randomGuess();\n      return flow.state;\n    case types.breaker.RESET_GUESS:\n      flow.resetGuess();\n      return flow.state;\n    case types.breaker.APPEND_GUESS_TOKEN:\n      flow.appendGuessToken(action.value);\n      return flow.state;\n    case types.maker.REMOVE_CODE_TOKEN:\n      flow.removeCodeToken();\n      return flow.state;\n    case types.maker.RANDOM_CODE:\n      flow.randomCode();\n      return flow.state;\n    case types.maker.RESET_CODE:\n      flow.resetCode();\n      return flow.state;\n    case types.maker.SAVE_CODE:\n      flow.saveCode();\n      return flow.state;\n    case types.maker.APPEND_CODE_TOKEN:\n      flow.appendCodeToken(action.value);\n      return flow.state;\n    default:\n      return state;\n  }\n}\n\nexport default game;","import React from 'react';\nimport { Provider } from 'react-redux'\nimport { createStore } from 'redux'\nimport Header from './components/Header';\nimport Footer from './components/Footer';\nimport SinglePlayer from './containers/SinglePlayer';\nimport gameReducers from './reducers/Reducers';\nimport * as actions from './actions/ActionCreators';\nimport './App.css';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.store = createStore(gameReducers);\n  }\n  componentDidMount() {\n    this.store.dispatch(actions.newGame());\n  }\n  render() {\n    return (\n      <Provider store={this.store}>\n        <div className=\"App\">\n          <Header></Header>\n          <SinglePlayer></SinglePlayer>\n          <Footer></Footer>\n        </div>\n      </Provider>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}